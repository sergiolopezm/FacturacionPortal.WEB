@using FacturacionPortal.WEB.Util
@inject IJSRuntime JSRuntime

@if (IsVisible && (!string.IsNullOrEmpty(Message) || ChildContent != null))
{
    <div class="alert @GetAlertClass() @(IsDismissible ? "alert-dismissible" : "") fade show @CssClass custom-alert" role="alert">
        <div class="alert-wrapper">
            <div class="alert-icon-wrapper">
                @if (!string.IsNullOrEmpty(Icon))
                {
                    <i class="@Icon alert-custom-icon"></i>
                }
            </div>

            <div class="alert-content-wrapper">
                @if (!string.IsNullOrEmpty(Title))
                {
                    <h6 class="alert-heading mb-1">@Title</h6>
                }

                <div class="alert-content">
                    @if (!string.IsNullOrEmpty(Message))
                    {
                        @Message
                    }
                    @ChildContent
                </div>
            </div>
        </div>

        @if (IsDismissible)
        {
            <button type="button" class="btn-close custom-btn-close" @onclick="Dismiss" aria-label="Close"></button>
        }
    </div>
}

<style>
    .custom-alert {
        position: relative;
        display: flex;
        align-items: center;
        padding: 1rem 1.25rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        border-left-width: 4px;
    }

    .alert-wrapper {
        display: flex;
        width: 100%;
        align-items: flex-start;
    }

    .alert-icon-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        flex-shrink: 0;
    }

    .alert-custom-icon {
        font-size: 1.5rem;
        line-height: 1;
    }

    .alert-content-wrapper {
        flex-grow: 1;
        min-width: 0;
    }

    .alert-content {
        word-wrap: break-word;
    }

    .custom-btn-close {
        position: absolute;
        right: 1rem;
        top: 1rem;
        opacity: 0.7;
        transition: opacity 0.2s ease-in-out;
    }

        .custom-btn-close:hover {
            opacity: 1;
        }

    /* Mejora los estilos específicos para cada tipo de alerta */
    .alert-success {
        border-left-color: var(--bs-success);
    }

    .alert-danger {
        border-left-color: var(--bs-danger);
    }

    .alert-warning {
        border-left-color: var(--bs-warning);
    }

    .alert-info {
        border-left-color: var(--bs-info);
    }

    .alert-primary {
        border-left-color: var(--bs-primary);
    }

    .alert-secondary {
        border-left-color: var(--bs-secondary);
    }

    .alert-light {
        border-left-color: var(--bs-light);
    }

    .alert-dark {
        border-left-color: var(--bs-dark);
    }

    /* Estilo para resaltar la alerta al aparecer */
    .alert-highlight {
        animation: pulse 1s;
    }

    @@keyframes pulse {
        0%

    {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7);
    }

    70% {
        box-shadow: 0 0 0 10px rgba(0, 123, 255, 0);
    }

    100% {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
    }

    }
</style>

@code {
    [Parameter] public AlertType Type { get; set; } = AlertType.Info;
    [Parameter] public string? Message { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public bool IsDismissible { get; set; } = true;
    [Parameter] public bool AutoHide { get; set; } = false;
    [Parameter] public int AutoHideDelay { get; set; } = 5000;
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnDismiss { get; set; }

    private Timer? _autoHideTimer;

    protected override void OnParametersSet()
    {
        if (AutoHide && IsVisible)
        {
            SetAutoHideTimer();
        }

        if (string.IsNullOrEmpty(Icon))
        {
            Icon = GetDefaultIcon();
        }
    }

    private void SetAutoHideTimer()
    {
        _autoHideTimer?.Dispose();
        _autoHideTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await Dismiss();
            });
        }, null, AutoHideDelay, Timeout.Infinite);
    }

    private async Task Dismiss()
    {
        IsVisible = false;
        _autoHideTimer?.Dispose();

        if (OnDismiss.HasDelegate)
        {
            await OnDismiss.InvokeAsync();
        }

        StateHasChanged();
    }

    private string GetAlertClass()
    {
        return Type switch
        {
            AlertType.Success => "alert-success",
            AlertType.Danger => "alert-danger",
            AlertType.Warning => "alert-warning",
            AlertType.Info => "alert-info",
            AlertType.Primary => "alert-primary",
            AlertType.Secondary => "alert-secondary",
            AlertType.Light => "alert-light",
            AlertType.Dark => "alert-dark",
            _ => "alert-info"
        };
    }

    private string GetDefaultIcon()
    {
        return Type switch
        {
            AlertType.Success => "bi bi-check-circle",
            AlertType.Danger => "bi bi-exclamation-triangle",
            AlertType.Warning => "bi bi-exclamation-circle",
            AlertType.Info => "bi bi-info-circle",
            AlertType.Primary => "bi bi-info-circle",
            AlertType.Secondary => "bi bi-info-circle",
            AlertType.Light => "bi bi-info-circle",
            AlertType.Dark => "bi bi-info-circle",
            _ => "bi bi-info-circle"
        };
    }

    // Método para obtener el título predeterminado según el tipo de alerta
    private string GetDefaultTitle(AlertType type)
    {
        return type switch
        {
            AlertType.Success => "¡Éxito!",
            AlertType.Danger => "Error",
            AlertType.Warning => "Advertencia",
            AlertType.Info => "Información",
            AlertType.Primary => "Información",
            AlertType.Secondary => "Información",
            AlertType.Light => "Información",
            AlertType.Dark => "Información",
            _ => "Información"
        };
    }

    public async Task Show(string message, AlertType type = AlertType.Info, string? title = null)
    {
        Message = message;
        Type = type;
        Title = title ?? GetDefaultTitle(type);
        IsVisible = true;
        StateHasChanged();

        // Hacer scroll hacia la alerta
        await JSRuntime.InvokeVoidAsync("scrollToAlert");

        if (AutoHide)
        {
            await StartHideTimer();
        }
    }

    // Implementación del método StartHideTimer
    private async Task StartHideTimer()
    {
        _autoHideTimer?.Dispose();
        _autoHideTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await Dismiss();
            });
        }, null, AutoHideDelay, Timeout.Infinite);

        await Task.CompletedTask;
    }

    public void Hide()
    {
        IsVisible = false;
        _autoHideTimer?.Dispose();
        StateHasChanged();
    }

    public void Dispose()
    {
        _autoHideTimer?.Dispose();
    }
}

<script>
    window.scrollToAlert = function() {
        // Buscar la alerta en la página
        const alertElement = document.querySelector('.custom-alert');
        if (alertElement) {
            // Scroll suave hacia la alerta
            alertElement.scrollIntoView({ behavior: 'smooth', block: 'start' });

            // Agregar efecto de destacado
            alertElement.classList.add('alert-highlight');
            setTimeout(() => {
                alertElement.classList.remove('alert-highlight');
            }, 1000);
        } else {
            // Si no se encuentra la alerta, hacer scroll al inicio de la página
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
    };
</script>