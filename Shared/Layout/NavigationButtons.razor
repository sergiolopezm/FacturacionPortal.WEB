@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="d-flex align-items-center breadcrumb-container">
    @if (ShowBackButton)
    {
        <button class="btn btn-navigation me-2" @onclick="GoBack" title="Volver">
            <i class="bi bi-arrow-left"></i>
        </button>
    }

    @if (ShowHomeButton)
    {
        <button class="btn btn-navigation me-2" @onclick="GoHome" title="Ir a Inicio">
            <i class="bi bi-house"></i>
        </button>
    }

    @if (BreadcrumbItems != null && BreadcrumbItems.Any())
    {
        <nav class="breadcrumb-nav">
            <ol class="breadcrumb mb-0">
                @foreach (var item in BreadcrumbItems)
                {
                    if (item.IsActive)
                    {
                        <li class="breadcrumb-item active">
                            @if (!string.IsNullOrEmpty(item.Icon))
                            {
                                <i class="bi @item.Icon me-1"></i>
                            }
                            <span>@item.Text</span>
                        </li>
                    }
                    else
                    {
                        <li class="breadcrumb-item">
                            <a href="@item.Url" class="text-decoration-none">
                                @if (!string.IsNullOrEmpty(item.Icon))
                                {
                                    <i class="bi @item.Icon me-1"></i>
                                }
                                <span>@item.Text</span>
                            </a>
                        </li>
                    }
                }
            </ol>
        </nav>
    }

    @if (ShowRefreshButton)
    {
        <button class="btn btn-navigation ms-2" @onclick="Refresh" title="Refrescar">
            <i class="bi bi-arrow-clockwise"></i>
        </button>
    }
</div>

<style>
    .breadcrumb-container {
        height: 100%;
    }

    .breadcrumb {
        margin-bottom: 0;
        background-color: transparent;
        padding: 0;
    }

    .breadcrumb-item {
        display: flex;
        align-items: center;
        color: rgba(255, 255, 255, 0.9);
    }

        .breadcrumb-item + .breadcrumb-item::before {
            color: rgba(255, 255, 255, 0.6);
        }

        .breadcrumb-item a {
            color: rgba(255, 255, 255, 0.75);
            transition: color 0.2s;
        }

            .breadcrumb-item a:hover {
                color: white;
            }

        .breadcrumb-item.active {
            color: white;
            font-weight: 500;
        }

    .btn-navigation {
        color: rgba(255, 255, 255, 0.85);
        background-color: rgba(255, 255, 255, 0.1);
        border: none;
        border-radius: 4px;
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        transition: all 0.2s;
    }

        .btn-navigation:hover {
            color: white;
            background-color: rgba(255, 255, 255, 0.2);
        }

    /* Estilos responsivos */
    @@media (max-width: 640.98px) {
        .breadcrumb-item span

    {
        display: none;
    }

    .breadcrumb-item.active span {
        display: inline;
    }

    .breadcrumb-item + .breadcrumb-item::before {
        display: none;
    }

    }
</style>

@code {
    [Parameter] public bool ShowBackButton { get; set; } = true;
    [Parameter] public bool ShowHomeButton { get; set; } = false;
    [Parameter] public bool ShowRefreshButton { get; set; } = false;
    [Parameter] public List<BreadcrumbItem>? BreadcrumbItems { get; set; }

    private async Task GoBack()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("history.back");
        }
        catch
        {
            Navigation.NavigateTo("/");
        }
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }

    private void Refresh()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    public class BreadcrumbItem
    {
        public string Text { get; set; } = "";
        public string? Url { get; set; }
        public string? Icon { get; set; }
        public bool IsActive { get; set; }
    }
}