@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="navigation-buttons @ContainerClass">
    @if (ShowBackButton)
    {
        <button class="btn @BackButtonClass" @onclick="GoBack" disabled="@IsNavigating" title="@BackButtonTitle">
            @if (IsNavigating && LastAction == NavigationAction.Back)
            {
                <span class="spinner-border spinner-border-sm me-1"></span>
            }
            else
            {
                <i class="bi @BackButtonIcon me-1"></i>
            }
            @BackButtonText
        </button>
    }

    @if (ShowHomeButton)
    {
        <button class="btn @HomeButtonClass" @onclick="GoHome" disabled="@IsNavigating" title="@HomeButtonTitle">
            @if (IsNavigating && LastAction == NavigationAction.Home)
            {
                <span class="spinner-border spinner-border-sm me-1"></span>
            }
            else
            {
                <i class="bi @HomeButtonIcon me-1"></i>
            }
            @HomeButtonText
        </button>
    }

    @if (ShowRefreshButton)
    {
        <button class="btn @RefreshButtonClass" @onclick="RefreshPage" disabled="@IsNavigating" title="@RefreshButtonTitle">
            @if (IsNavigating && LastAction == NavigationAction.Refresh)
            {
                <span class="spinner-border spinner-border-sm me-1"></span>
            }
            else
            {
                <i class="bi @RefreshButtonIcon me-1"></i>
            }
            @RefreshButtonText
        </button>
    }

    @if (CustomButtons != null)
    {
        @CustomButtons
    }

    @if (BreadcrumbItems != null && BreadcrumbItems.Any())
    {
        <nav aria-label="breadcrumb" class="@BreadcrumbClass">
            <ol class="breadcrumb mb-0">
                @foreach (var item in BreadcrumbItems)
                {
                    @if (item.IsActive)
                    {
                        <li class="breadcrumb-item active" aria-current="page">
                            @if (!string.IsNullOrEmpty(item.Icon))
                            {
                                <i class="bi @item.Icon me-1"></i>
                            }
                            @item.Text
                        </li>
                    }
                    else
                    {
                        <li class="breadcrumb-item">
                            @if (!string.IsNullOrEmpty(item.Url))
                            {
                                <a href="@item.Url" class="text-decoration-none" @onclick="() => NavigateTo(item.Url)">
                                    @if (!string.IsNullOrEmpty(item.Icon))
                                    {
                                        <i class="bi @item.Icon me-1"></i>
                                    }
                                    @item.Text
                                </a>
                            }
                            else
                            {
                                @if (!string.IsNullOrEmpty(item.Icon))
                                {
                                    <i class="bi @item.Icon me-1"></i>
                                }
                                @item.Text
                            }
                        </li>
                    }
                }
            </ol>
        </nav>
    }
</div>

@code {
    [Parameter] public bool ShowBackButton { get; set; } = true;
    [Parameter] public bool ShowHomeButton { get; set; } = false;
    [Parameter] public bool ShowRefreshButton { get; set; } = false;

    [Parameter] public string BackButtonText { get; set; } = "Volver";
    [Parameter] public string HomeButtonText { get; set; } = "Inicio";
    [Parameter] public string RefreshButtonText { get; set; } = "Actualizar";

    [Parameter] public string BackButtonIcon { get; set; } = "bi-arrow-left";
    [Parameter] public string HomeButtonIcon { get; set; } = "bi-house";
    [Parameter] public string RefreshButtonIcon { get; set; } = "bi-arrow-clockwise";

    [Parameter] public string BackButtonClass { get; set; } = "btn-outline-secondary";
    [Parameter] public string HomeButtonClass { get; set; } = "btn-outline-primary";
    [Parameter] public string RefreshButtonClass { get; set; } = "btn-outline-info";

    [Parameter] public string BackButtonTitle { get; set; } = "Volver a la página anterior";
    [Parameter] public string HomeButtonTitle { get; set; } = "Ir al inicio";
    [Parameter] public string RefreshButtonTitle { get; set; } = "Actualizar página";

    [Parameter] public string ContainerClass { get; set; } = "d-flex align-items-center gap-2 flex-wrap";
    [Parameter] public string BreadcrumbClass { get; set; } = "ms-auto";

    [Parameter] public List<BreadcrumbItem>? BreadcrumbItems { get; set; }
    [Parameter] public RenderFragment? CustomButtons { get; set; }

    [Parameter] public string? CustomBackUrl { get; set; }
    [Parameter] public string HomeUrl { get; set; } = "/";

    [Parameter] public EventCallback OnBack { get; set; }
    [Parameter] public EventCallback OnHome { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }
    [Parameter] public EventCallback<string> OnNavigate { get; set; }

    private bool IsNavigating = false;
    private NavigationAction LastAction = NavigationAction.None;

    private async Task GoBack()
    {
        if (IsNavigating) return;

        try
        {
            IsNavigating = true;
            LastAction = NavigationAction.Back;
            StateHasChanged();

            if (OnBack.HasDelegate)
            {
                await OnBack.InvokeAsync();
            }
            else
            {
                if (!string.IsNullOrEmpty(CustomBackUrl))
                {
                    Navigation.NavigateTo(CustomBackUrl);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("history.back");
                }
            }
        }
        catch (Exception)
        {
            // En caso de error, navegar al home
            Navigation.NavigateTo(HomeUrl);
        }
        finally
        {
            await Task.Delay(100); // Pequeña demora para mostrar el spinner
            IsNavigating = false;
            LastAction = NavigationAction.None;
            StateHasChanged();
        }
    }

    private async Task GoHome()
    {
        if (IsNavigating) return;

        try
        {
            IsNavigating = true;
            LastAction = NavigationAction.Home;
            StateHasChanged();

            if (OnHome.HasDelegate)
            {
                await OnHome.InvokeAsync();
            }
            else
            {
                Navigation.NavigateTo(HomeUrl);
            }
        }
        finally
        {
            await Task.Delay(100);
            IsNavigating = false;
            LastAction = NavigationAction.None;
            StateHasChanged();
        }
    }

    private async Task RefreshPage()
    {
        if (IsNavigating) return;

        try
        {
            IsNavigating = true;
            LastAction = NavigationAction.Refresh;
            StateHasChanged();

            if (OnRefresh.HasDelegate)
            {
                await OnRefresh.InvokeAsync();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("location.reload");
            }
        }
        finally
        {
            await Task.Delay(100);
            IsNavigating = false;
            LastAction = NavigationAction.None;
            StateHasChanged();
        }
    }

    private async Task NavigateTo(string? url)
    {
        if (string.IsNullOrEmpty(url) || IsNavigating) return;

        try
        {
            IsNavigating = true;
            StateHasChanged();

            if (OnNavigate.HasDelegate)
            {
                await OnNavigate.InvokeAsync(url);
            }
            else
            {
                Navigation.NavigateTo(url);
            }
        }
        finally
        {
            await Task.Delay(100);
            IsNavigating = false;
            StateHasChanged();
        }
    }

    public void AddBreadcrumb(string text, string? url = null, string? icon = null, bool isActive = false)
    {
        BreadcrumbItems ??= new List<BreadcrumbItem>();

        // Desactivar elementos anteriores
        foreach (var item in BreadcrumbItems)
        {
            item.IsActive = false;
        }

        BreadcrumbItems.Add(new BreadcrumbItem
        {
            Text = text,
            Url = url,
            Icon = icon,
            IsActive = isActive
        });

        StateHasChanged();
    }

    public void SetBreadcrumbs(List<BreadcrumbItem> items)
    {
        BreadcrumbItems = items;
        StateHasChanged();
    }

    public void ClearBreadcrumbs()
    {
        BreadcrumbItems?.Clear();
        StateHasChanged();
    }
}

public class BreadcrumbItem
{
    public string Text { get; set; } = string.Empty;
    public string? Url { get; set; }
    public string? Icon { get; set; }
    public bool IsActive { get; set; }
}

public enum NavigationAction
{
    None,
    Back,
    Home,
    Refresh,
    Custom
}
