@using FacturacionPortal.WEB.Models.Facturacion
@using FacturacionPortal.WEB.Services.Interface
@using FacturacionPortal.WEB.Shared.Components
@using FacturacionPortal.WEB.Shared.Features.FacturaDetalle
@using FacturacionPortal.WEB.Components.Shared
@inject IArticuloService ArticuloService

<div class="detalle-editor @ContainerClass">
    @if (ShowHeader)
    {
        <div class="editor-header d-flex justify-content-between align-items-center mb-3">
            <h6 class="mb-0">@HeaderTitle</h6>
            <div class="d-flex gap-2">
                @if (ShowAddButton)
                {
                    <button class="btn btn-primary btn-sm" @onclick="ShowAddForm" disabled="@IsLoading">
                        <i class="bi bi-plus me-1"></i>Agregar Artículo
                    </button>
                }
                @if (ShowBulkActions && HasSelectedItems)
                {
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-danger" @onclick="DeleteSelected" disabled="@IsLoading">
                            <i class="bi bi-trash me-1"></i>Eliminar (@SelectedCount)
                        </button>
                    </div>
                }
            </div>
        </div>
    }

    @if (ShowAddForm)
    {
        <div class="add-form card mb-3">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Artículo *</label>
                        <select class="form-select @(HasAddFormError("ArticuloId") ? "is-invalid" : "")"
                                @bind="NewDetalle.ArticuloId"
                                @onchange="OnNewArticuloChanged">
                            <option value="">Seleccionar artículo...</option>
                            @if (ArticulosDisponibles != null)
                            {
                                @foreach (var articulo in ArticulosDisponibles)
                                {
                                    <option value="@articulo.Id">@articulo.CodigoNombre</option>
                                }
                            }
                        </select>
                        @if (HasAddFormError("ArticuloId"))
                        {
                            <div class="invalid-feedback">@GetAddFormError("ArticuloId")</div>
                        }
                    </div>
                    
                    <div class="col-md-2">
                        <label class="form-label">Cantidad *</label>
                        <input type="number" class="form-control @(HasAddFormError("Cantidad") ? "is-invalid" : "")"
                               @bind="NewDetalle.Cantidad"
                               @oninput="OnNewCantidadChanged"
                               min="1"
                               max="@GetMaxCantidad()" />
                        @if (HasAddFormError("Cantidad"))
                        {
                            <div class="invalid-feedback">@GetAddFormError("Cantidad")</div>
                        }
                    </div>
                    
                    <div class="col-md-2">
                        <label class="form-label">Precio Unit. *</label>
                        <input type="number" class="form-control @(HasAddFormError("PrecioUnitario") ? "is-invalid" : "")"
                               @bind="NewDetalle.PrecioUnitario"
                               @oninput="OnNewPrecioChanged"
                               min="0.01"
                               step="0.01" />
                        @if (HasAddFormError("PrecioUnitario"))
                        {
                            <div class="invalid-feedback">@GetAddFormError("PrecioUnitario")</div>
                        }
                    </div>
                    
                    <div class="col-md-2">
                        <label class="form-label">Subtotal</label>
                        <div class="form-control-plaintext">
                            <CurrencyDisplay Value="@NewDetalle.Subtotal" ShowSymbol="true" />
                        </div>
                    </div>
                    
                    <div class="col-md-2">
                        <label class="form-label">&nbsp;</label>
                        <div class="d-flex gap-1">
                            <button class="btn btn-success" @onclick="AddDetalle" disabled="@(IsLoading || !IsNewDetalleValid)">
                                @if (IsLoading)
                                {
                                    <span class="spinner-border spinner-border-sm"></span>
                                }
                                else
                                {
                                    <i class="bi bi-check"></i>
                                }
                            </button>
                            <button class="btn btn-secondary" @onclick="CancelAdd">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    </div>
                </div>

                @if (SelectedArticuloInfo != null)
                {
                    <div class="mt-2 p-2 bg-light rounded">
                        <div class="row">
                            <div class="col-md-3">
                                <small class="text-muted">Stock Disponible:</small>
                                <div class="fw-bold @GetStockClass(SelectedArticuloInfo.Stock)">
                                    @SelectedArticuloInfo.Stock unidades
                                </div>
                            </div>
                            <div class="col-md-3">
                                <small class="text-muted">Categoría:</small>
                                <div>@(SelectedArticuloInfo.Categoria ?? "Sin categoría")</div>
                            </div>
                            <div class="col-md-6">
                                <small class="text-muted">Descripción:</small>
                                <div>@(SelectedArticuloInfo.Descripcion ?? "Sin descripción")</div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    @if (IsLoading)
    {
        <Loading IsVisible="true" Text="Cargando artículos..." />
    }
    else if (Detalles == null || !Detalles.Any())
    {
        <div class="text-center py-4">
            <i class="bi bi-cart display-4 text-muted"></i>
            <div class="mt-2 text-muted">@EmptyMessage</div>
            @if (!ShowAddForm && ShowAddButton)
            {
                <button class="btn btn-primary mt-2" @onclick="ShowAddForm">
                    <i class="bi bi-plus me-1"></i>Agregar Primer Artículo
                </button>
            }
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-dark">
                    <tr>
                        @if (ShowBulkActions)
                        {
                            <th class="text-center" style="width: 50px;">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" 
                                           @bind="SelectAll" 
                                           @onchange="OnSelectAllChanged" />
                                </div>
                            </th>
                        }
                        <th style="width: 50px;">#</th>
                        <th>Artículo</th>
                        <th class="text-center" style="width: 100px;">Cantidad</th>
                        <th class="text-end" style="width: 120px;">Precio Unit.</th>
                        <th class="text-end" style="width: 120px;">Subtotal</th>
                        @if (ShowStockInfo)
                        {
                            <th class="text-center" style="width: 80px;">Stock</th>
                        }
                        @if (ShowActions)
                        {
                            <th class="text-center" style="width: 120px;">Acciones</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (detalle, index) in Detalles.Select((d, i) => (d, i + 1)))
                    {
                        <DetalleItem Detalle="@detalle"
                                   Articulos="@ArticulosDisponibles"
                                   Index="@index"
                                   IsSelected="@IsSelected(detalle)"
                                   IsEditable="@IsEditable"
                                   ShowSelector="@ShowBulkActions"
                                   ShowIndex="true"
                                   ShowActions="@ShowActions"
                                   ShowStockInfo="@ShowStockInfo"
                                   ShowDuplicateButton="@ShowDuplicateButton"
                                   ShowDeleteButton="@ShowDeleteButton"
                                   IsSelectedChanged="@(selected => OnItemSelectionChanged(detalle, selected))"
                                   OnEdit="@OnItemEdit"
                                   OnSave="@OnItemSave"
                                   OnDelete="@OnItemDelete"
                                   OnDuplicate="@OnItemDuplicate"
                                   OnChanged="@OnItemChanged" />
                    }
                </tbody>
                @if (ShowTotals)
                {
                    <tfoot class="table-light">
                        <tr class="fw-bold">
                            <td colspan="@GetTotalColspan()" class="text-end">Total:</td>
                            <td class="text-end">
                                <CurrencyDisplay Value="@GetTotal()" ShowSymbol="true" CssClass="fs-5 fw-bold text-primary" />
                            </td>
                            @if (ShowStockInfo)
                            {
                                <td></td>
                            }
                            @if (ShowActions)
                            {
                                <td></td>
                            }
                        </tr>
                    </tfoot>
                }
            </table>
        </div>
    }
</div>

<Confirm @ref="ConfirmDialog" />

@code {
    [Parameter] public List<FacturaDetalleDto>? Detalles { get; set; }
    [Parameter] public EventCallback<List<FacturaDetalleDto>> DetallesChanged { get; set; }
    
    [Parameter] public bool IsEditable { get; set; } = true;
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowAddButton { get; set; } = true;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool ShowStockInfo { get; set; } = true;
    [Parameter] public bool ShowBulkActions { get; set; } = true;
    [Parameter] public bool ShowDuplicateButton { get; set; } = true;
    [Parameter] public bool ShowDeleteButton { get; set; } = true;
    [Parameter] public bool ShowTotals { get; set; } = true;
    
    [Parameter] public string HeaderTitle { get; set; } = "Artículos de la Factura";
    [Parameter] public string EmptyMessage { get; set; } = "No hay artículos agregados";
    [Parameter] public string ContainerClass { get; set; } = "";
    
    [Parameter] public EventCallback<FacturaDetalleDto> OnDetalleAdded { get; set; }
    [Parameter] public EventCallback<FacturaDetalleDto> OnDetalleUpdated { get; set; }
    [Parameter] public EventCallback<FacturaDetalleDto> OnDetalleDeleted { get; set; }
    [Parameter] public EventCallback<List<FacturaDetalleDto>> OnDetallesChanged { get; set; }

    private List<ArticuloDto>? ArticulosDisponibles;
    private ArticuloDto? SelectedArticuloInfo;
    private CrearFacturaDetalleDto NewDetalle = new();
    private List<FacturaDetalleDto> SelectedItems = new();
    private Dictionary<string, string> AddFormErrors = new();
    private Confirm? ConfirmDialog;
    
    private bool IsLoading = false;
    private bool ShowAddForm = false;
    private bool SelectAll = false;

    private bool HasSelectedItems => SelectedItems.Any();
    private int SelectedCount => SelectedItems.Count;
    private bool IsNewDetalleValid => NewDetalle.ArticuloId > 0 && NewDetalle.Cantidad > 0 && NewDetalle.PrecioUnitario > 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadArticulos();
    }

    private async Task LoadArticulos()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            var result = await ArticuloService.GetAll();
            if (result.Success && result.Data != null)
            {
                ArticulosDisponibles = result.Data.Where(a => a.Activo && a.TieneStock).ToList();
            }
        }
        catch (Exception)
        {
            ArticulosDisponibles = new List<ArticuloDto>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnNewArticuloChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int articuloId))
        {
            SelectedArticuloInfo = ArticulosDisponibles?.FirstOrDefault(a => a.Id == articuloId);
            if (SelectedArticuloInfo != null)
            {
                NewDetalle.ArticuloId = articuloId;
                NewDetalle.ArticuloCodigo = SelectedArticuloInfo.Codigo;
                NewDetalle.ArticuloNombre = SelectedArticuloInfo.Nombre;
                NewDetalle.PrecioUnitario = SelectedArticuloInfo.PrecioUnitario;
                NewDetalle.StockDisponible = SelectedArticuloInfo.Stock;
                
                await CalculateNewSubtotal();
                ClearAddFormError("ArticuloId");
            }
        }
        else
        {
            SelectedArticuloInfo = null;
            NewDetalle = new CrearFacturaDetalleDto();
        }
    }

    private async Task OnNewCantidadChanged()
    {
        await CalculateNewSubtotal();
        ValidateNewCantidad();
    }

    private async Task OnNewPrecioChanged()
    {
        await CalculateNewSubtotal();
        ValidateNewPrecio();
    }

    private async Task CalculateNewSubtotal()
    {
        await Task.CompletedTask;
    }

    private void ValidateNewCantidad()
    {
        if (NewDetalle.Cantidad <= 0)
        {
            SetAddFormError("Cantidad", "La cantidad debe ser mayor a 0");
        }
        else if (SelectedArticuloInfo != null && NewDetalle.Cantidad > SelectedArticuloInfo.Stock)
        {
            SetAddFormError("Cantidad", $"Stock insuficiente. Disponible: {SelectedArticuloInfo.Stock}");
        }
        else
        {
            ClearAddFormError("Cantidad");
        }
    }

    private void ValidateNewPrecio()
    {
        if (NewDetalle.PrecioUnitario <= 0)
        {
            SetAddFormError("PrecioUnitario", "El precio debe ser mayor a 0");
        }
        else
        {
            ClearAddFormError("PrecioUnitario");
        }
    }

    private async Task AddDetalle()
    {
        if (!IsNewDetalleValid || !ValidateNewDetalle()) return;

        var nuevoDetalle = new FacturaDetalleDto
        {
            ArticuloId = NewDetalle.ArticuloId,
            ArticuloCodigo = NewDetalle.ArticuloCodigo ?? "",
            ArticuloNombre = NewDetalle.ArticuloNombre ?? "",
            ArticuloDescripcion = SelectedArticuloInfo?.Descripcion,
            Cantidad = NewDetalle.Cantidad,
            PrecioUnitario = NewDetalle.PrecioUnitario,
            Subtotal = NewDetalle.Subtotal,
            StockActual = SelectedArticuloInfo?.Stock
        };

        Detalles ??= new List<FacturaDetalleDto>();
        Detalles.Add(nuevoDetalle);

        await NotifyDetallesChanged();
        
        if (OnDetalleAdded.HasDelegate)
        {
            await OnDetalleAdded.InvokeAsync(nuevoDetalle);
        }

        await CancelAdd();
    }

    private bool ValidateNewDetalle()
    {
        var isValid = true;

        if (NewDetalle.ArticuloId <= 0)
        {
            SetAddFormError("ArticuloId", "Debe seleccionar un artículo");
            isValid = false;
        }

        if (NewDetalle.Cantidad <= 0)
        {
            SetAddFormError("Cantidad", "La cantidad debe ser mayor a 0");
            isValid = false;
        }

        if (NewDetalle.PrecioUnitario <= 0)
        {
            SetAddFormError("PrecioUnitario", "El precio debe ser mayor a 0");
            isValid = false;
        }

        // Verificar si el artículo ya está en la lista
        if (Detalles?.Any(d => d.ArticuloId == NewDetalle.ArticuloId) == true)
        {
            SetAddFormError("ArticuloId", "Este artículo ya está agregado");
            isValid = false;
        }

        return isValid;
    }

    private async Task CancelAdd()
    {
        ShowAddForm = false;
        NewDetalle = new CrearFacturaDetalleDto();
        SelectedArticuloInfo = null;
        AddFormErrors.Clear();
        await Task.CompletedTask;
    }

    private async Task OnItemSelectionChanged(FacturaDetalleDto detalle, bool selected)
    {
        if (selected)
        {
            if (!SelectedItems.Contains(detalle))
                SelectedItems.Add(detalle);
        }
        else
        {
            SelectedItems.Remove(detalle);
        }

        SelectAll = Detalles != null && SelectedItems.Count == Detalles.Count;
        await Task.CompletedTask;
    }

    private async Task OnSelectAllChanged(ChangeEventArgs e)
    {
        var selectAll = (bool)(e.Value ?? false);
        
        if (selectAll)
        {
            SelectedItems = Detalles?.ToList() ?? new List<FacturaDetalleDto>();
        }
        else
        {
            SelectedItems.Clear();
        }

        SelectAll = selectAll;
        await Task.CompletedTask;
    }

    private async Task OnItemEdit(FacturaDetalleDto detalle)
    {
        await Task.CompletedTask;
    }

    private async Task OnItemSave(FacturaDetalleDto detalle)
    {
        await NotifyDetallesChanged();
        
        if (OnDetalleUpdated.HasDelegate)
        {
            await OnDetalleUpdated.InvokeAsync(detalle);
        }
    }

    private async Task OnItemDelete(FacturaDetalleDto detalle)
    {
        if (ConfirmDialog != null)
        {
            var confirmed = await ConfirmDialog.ShowAsync(
                "Eliminar Artículo",
                $"¿Está seguro que desea eliminar {detalle.ArticuloNombre}?",
                ConfirmType.Danger
            );

            if (confirmed)
            {
                Detalles?.Remove(detalle);
                SelectedItems.Remove(detalle);
                await NotifyDetallesChanged();
                
                if (OnDetalleDeleted.HasDelegate)
                {
                    await OnDetalleDeleted.InvokeAsync(detalle);
                }
            }
        }
    }

    private async Task OnItemDuplicate(FacturaDetalleDto detalle)
    {
        var duplicado = new FacturaDetalleDto
        {
            ArticuloId = detalle.ArticuloId,
            ArticuloCodigo = detalle.ArticuloCodigo,
            ArticuloNombre = detalle.ArticuloNombre,
            ArticuloDescripcion = detalle.ArticuloDescripcion,
            Cantidad = detalle.Cantidad,
            PrecioUnitario = detalle.PrecioUnitario,
            Subtotal = detalle.Subtotal,
            StockActual = detalle.StockActual
        };

        Detalles?.Add(duplicado);
        await NotifyDetallesChanged();
        
        if (OnDetalleAdded.HasDelegate)
        {
            await OnDetalleAdded.InvokeAsync(duplicado);
        }
    }

    private async Task OnItemChanged(FacturaDetalleDto detalle)
    {
        await NotifyDetallesChanged();
    }

    private async Task DeleteSelected()
    {
        if (!HasSelectedItems || ConfirmDialog == null) return;

        var confirmed = await ConfirmDialog.ShowAsync(
            "Eliminar Artículos",
            $"¿Está seguro que desea eliminar {SelectedCount} artículo(s) seleccionado(s)?",
            ConfirmType.Danger
        );

        if (confirmed)
        {
            foreach (var item in SelectedItems.ToList())
            {
                Detalles?.Remove(item);
            }
            
            SelectedItems.Clear();
            SelectAll = false;
            await NotifyDetallesChanged();
        }
    }

    private async Task NotifyDetallesChanged()
    {
        if (DetallesChanged.HasDelegate)
        {
            await DetallesChanged.InvokeAsync(Detalles);
        }
        
        if (OnDetallesChanged.HasDelegate)
        {
            await OnDetallesChanged.InvokeAsync(Detalles ?? new List<FacturaDetalleDto>());
        }
    }

    // Helper methods
    private bool IsSelected(FacturaDetalleDto detalle) => SelectedItems.Contains(detalle);
    private int GetMaxCantidad() => SelectedArticuloInfo?.Stock ?? 999999;
    private decimal GetTotal() => Detalles?.Sum(d => d.Subtotal) ?? 0;
    private int GetTotalColspan() => 4 + (ShowBulkActions ? 1 : 0);
    
    private string GetStockClass(int stock) => stock <= 0 ? "text-danger" : stock <= 5 ? "text-warning" : "text-success";
    
    private void SetAddFormError(string field, string message) => AddFormErrors[field] = message;
    private void ClearAddFormError(string field) => AddFormErrors.Remove(field);
    private bool HasAddFormError(string field) => AddFormErrors.ContainsKey(field);
    private string GetAddFormError(string field) => AddFormErrors.GetValueOrDefault(field, "");
}