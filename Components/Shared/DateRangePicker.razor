@using FacturacionPortal.WEB.Util.Extensions

<div class="date-range-picker @CssClass">
    <div class="row g-2">
        <div class="col-md-6">
            <label class="form-label">@StartDateLabel</label>
            <input type="date"
                   class="form-control @(HasStartDateError ? "is-invalid" : "")"
                   @bind="StartDate"
                   @bind:event="oninput"
                   @onchange="OnStartDateChanged"
                   max="@MaxStartDate"
                   min="@MinStartDate" />
            @if (HasStartDateError)
            {
                <div class="invalid-feedback">@StartDateError</div>
            }
        </div>
        <div class="col-md-6">
            <label class="form-label">@EndDateLabel</label>
            <input type="date"
                   class="form-control @(HasEndDateError ? "is-invalid" : "")"
                   @bind="EndDate"
                   @bind:event="oninput"
                   @onchange="OnEndDateChanged"
                   max="@MaxEndDate"
                   min="@MinEndDate" />
            @if (HasEndDateError)
            {
                <div class="invalid-feedback">@EndDateError</div>
            }
        </div>
    </div>

    @if (ShowQuickSelectors)
    {
        <div class="mt-2">
            <div class="btn-group btn-group-sm" role="group">
                <button type="button" class="btn btn-outline-secondary" @onclick="SetToday">Hoy</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="SetYesterday">Ayer</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="SetThisWeek">Esta Semana</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="SetThisMonth">Este Mes</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="SetLastMonth">Mes Pasado</button>
                @if (ShowYearSelector)
                {
                    <button type="button" class="btn btn-outline-secondary" @onclick="SetThisYear">Este Año</button>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public DateTime? StartDate { get; set; }
    [Parameter] public EventCallback<DateTime?> StartDateChanged { get; set; }

    [Parameter] public DateTime? EndDate { get; set; }
    [Parameter] public EventCallback<DateTime?> EndDateChanged { get; set; }

    [Parameter] public string StartDateLabel { get; set; } = "Fecha Inicio";
    [Parameter] public string EndDateLabel { get; set; } = "Fecha Fin";

    [Parameter] public bool ShowQuickSelectors { get; set; } = true;
    [Parameter] public bool ShowYearSelector { get; set; } = true;
    [Parameter] public bool ValidateRange { get; set; } = true;
    [Parameter] public string CssClass { get; set; } = string.Empty;

    [Parameter] public DateTime? MinDate { get; set; }
    [Parameter] public DateTime? MaxDate { get; set; }
    [Parameter] public int MaxDaysRange { get; set; } = 365;

    [Parameter] public EventCallback<(DateTime? Start, DateTime? End)> OnRangeChanged { get; set; }

    private string StartDateError = string.Empty;
    private string EndDateError = string.Empty;
    private bool HasStartDateError => !string.IsNullOrEmpty(StartDateError);
    private bool HasEndDateError => !string.IsNullOrEmpty(EndDateError);

    private string MinStartDate => MinDate?.ToISODateString() ?? "2000-01-01";
    private string MaxStartDate => MaxDate?.ToISODateString() ?? DateTime.Now.ToISODateString();
    private string MinEndDate => StartDate?.ToISODateString() ?? MinStartDate;
    private string MaxEndDate => MaxDate?.ToISODateString() ?? DateTime.Now.ToISODateString();

    protected override void OnInitialized()
    {
        if (StartDate == null && EndDate == null)
        {
            SetThisMonth();
        }
    }

    private async Task OnStartDateChanged()
    {
        ValidateStartDate();
        await StartDateChanged.InvokeAsync(StartDate);
        await NotifyRangeChanged();
    }

    private async Task OnEndDateChanged()
    {
        ValidateEndDate();
        await EndDateChanged.InvokeAsync(EndDate);
        await NotifyRangeChanged();
    }

    private void ValidateStartDate()
    {
        StartDateError = string.Empty;

        if (!StartDate.HasValue)
            return;

        if (MinDate.HasValue && StartDate < MinDate)
        {
            StartDateError = $"La fecha no puede ser anterior a {MinDate.Value.ToColombiaShortDateString()}";
            return;
        }

        if (MaxDate.HasValue && StartDate > MaxDate)
        {
            StartDateError = $"La fecha no puede ser posterior a {MaxDate.Value.ToColombiaShortDateString()}";
            return;
        }

        if (ValidateRange && EndDate.HasValue && StartDate > EndDate)
        {
            StartDateError = "La fecha de inicio no puede ser posterior a la fecha de fin";
        }
    }

    private void ValidateEndDate()
    {
        EndDateError = string.Empty;

        if (!EndDate.HasValue)
            return;

        if (MinDate.HasValue && EndDate < MinDate)
        {
            EndDateError = $"La fecha no puede ser anterior a {MinDate.Value.ToColombiaShortDateString()}";
            return;
        }

        if (MaxDate.HasValue && EndDate > MaxDate)
        {
            EndDateError = $"La fecha no puede ser posterior a {MaxDate.Value.ToColombiaShortDateString()}";
            return;
        }

        if (ValidateRange && StartDate.HasValue && EndDate < StartDate)
        {
            EndDateError = "La fecha de fin no puede ser anterior a la fecha de inicio";
            return;
        }

        if (ValidateRange && StartDate.HasValue && MaxDaysRange > 0)
        {
            var daysDiff = (EndDate.Value - StartDate.Value).Days;
            if (daysDiff > MaxDaysRange)
            {
                EndDateError = $"El rango no puede ser mayor a {MaxDaysRange} días";
            }
        }
    }

    private async Task NotifyRangeChanged()
    {
        if (OnRangeChanged.HasDelegate)
        {
            await OnRangeChanged.InvokeAsync((StartDate, EndDate));
        }
    }

    private async Task SetToday()
    {
        var today = DateTime.Today;
        StartDate = today;
        EndDate = today;
        await UpdateDates();
    }

    private async Task SetYesterday()
    {
        var yesterday = DateTime.Today.AddDays(-1);
        StartDate = yesterday;
        EndDate = yesterday;
        await UpdateDates();
    }

    private async Task SetThisWeek()
    {
        var today = DateTime.Today;
        var startOfWeek = today.AddDays(-(int)today.DayOfWeek);
        StartDate = startOfWeek;
        EndDate = today;
        await UpdateDates();
    }

    private async Task SetThisMonth()
    {
        var today = DateTime.Today;
        StartDate = today.StartOfMonth();
        EndDate = today;
        await UpdateDates();
    }

    private async Task SetLastMonth()
    {
        var lastMonth = DateTime.Today.AddMonths(-1);
        StartDate = lastMonth.StartOfMonth();
        EndDate = lastMonth.EndOfMonth().Date;
        await UpdateDates();
    }

    private async Task SetThisYear()
    {
        var today = DateTime.Today;
        StartDate = today.StartOfYear();
        EndDate = today;
        await UpdateDates();
    }

    private async Task UpdateDates()
    {
        ValidateStartDate();
        ValidateEndDate();
        await StartDateChanged.InvokeAsync(StartDate);
        await EndDateChanged.InvokeAsync(EndDate);
        await NotifyRangeChanged();
        StateHasChanged();
    }
}
