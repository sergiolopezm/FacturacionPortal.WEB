@page "/reportes/ventas"
@using FacturacionPortal.WEB.Models.Facturacion
@using FacturacionPortal.WEB.Services.Interface
@using FacturacionPortal.WEB.Shared.Components
@using FacturacionPortal.WEB.Components.Shared
@using FacturacionPortal.WEB.Helpers
@using FacturacionPortal.WEB.Util
@using FacturacionPortal.WEB.Util.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@inject IReporteService ReporteService
@inject IFacturaService FacturaService
@inject IClienteService ClienteService
@inject IArticuloService ArticuloService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Reporte de Ventas - FacturacionPortal</PageTitle>

<div class="reporte-ventas-container">
    <!-- Header -->
    <div class="page-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="mb-1">
                    <i class="bi bi-graph-up-arrow text-primary me-2"></i>
                    Reporte de Ventas
                </h2>
                <p class="text-muted mb-0">Análisis completo del rendimiento de ventas y tendencias del negocio</p>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-info" @onclick="ExportarExcel" disabled="@IsLoading">
                    <i class="bi bi-file-excel me-1"></i>Excel
                </button>
                <button class="btn btn-outline-danger" @onclick="ExportarPDF" disabled="@IsLoading">
                    <i class="bi bi-file-pdf me-1"></i>PDF
                </button>
                <button class="btn btn-outline-secondary" @onclick="ImprimirReporte" disabled="@IsLoading">
                    <i class="bi bi-printer me-1"></i>Imprimir
                </button>
                <button class="btn btn-primary" @onclick="GenerarReporte" disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-1"></span>
                    }
                    else
                    {
                        <i class="bi bi-arrow-clockwise me-1"></i>
                    }
                    Generar
                </button>
            </div>
        </div>
    </div>

    <Alert @ref="AlertComponent" />

    <!-- Panel de Filtros -->
    <div class="card shadow-sm mb-4">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="card-title mb-0">
                    <i class="bi bi-funnel me-2"></i>Filtros y Configuración
                </h6>
                <button class="btn btn-sm btn-outline-secondary" @onclick="LimpiarFiltros">
                    <i class="bi bi-x-circle me-1"></i>Limpiar
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <!-- Rango de Fechas -->
                <div class="col-md-3">
                    <label class="form-label">Fecha Inicio *</label>
                    <input type="date" 
                           class="form-control @(HasFechaError ? "is-invalid" : "")"
                           @bind="FechaInicio"
                           max="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    @if (HasFechaError)
                    {
                        <div class="invalid-feedback">@FechaErrorMessage</div>
                    }
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Fin *</label>
                    <input type="date" 
                           class="form-control @(HasFechaError ? "is-invalid" : "")"
                           @bind="FechaFin"
                           max="@DateTime.Now.ToString("yyyy-MM-dd")" />
                </div>

                <!-- Filtros Adicionales -->
                <div class="col-md-2">
                    <label class="form-label">Estado</label>
                    <select class="form-select" @bind="EstadoFiltro">
                        <option value="">Todos</option>
                        <option value="Activa">Activa</option>
                        <option value="Anulada">Anulada</option>
                        <option value="Pagada">Pagada</option>
                    </select>
                </div>

                <div class="col-md-2">
                    <label class="form-label">Agrupación</label>
                    <select class="form-select" @bind="TipoAgrupacion">
                        <option value="diario">Diario</option>
                        <option value="semanal">Semanal</option>
                        <option value="mensual" selected>Mensual</option>
                        <option value="trimestral">Trimestral</option>
                    </select>
                </div>

                <div class="col-md-2">
                    <label class="form-label">&nbsp;</label>
                    <button class="btn btn-success w-100" @onclick="GenerarReporte" disabled="@(IsLoading || !EsFechaValida)">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm"></span>
                        }
                        else
                        {
                            <i class="bi bi-play-fill"></i>
                        }
                    </button>
                </div>
            </div>

            <!-- Rangos Rápidos -->
            <div class="mt-3">
                <small class="text-muted me-2">Períodos predefinidos:</small>
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-secondary" @onclick="SetUltimos7Dias">Últimos 7 días</button>
                    <button class="btn btn-outline-secondary" @onclick="SetUltimos30Dias">Últimos 30 días</button>
                    <button class="btn btn-outline-secondary" @onclick="SetEsteMes">Este mes</button>
                    <button class="btn btn-outline-secondary" @onclick="SetMesAnterior">Mes anterior</button>
                    <button class="btn btn-outline-secondary" @onclick="SetUltimos3Meses">Últimos 3 meses</button>
                    <button class="btn btn-outline-secondary" @onclick="SetEsteAño">Este año</button>
                </div>
            </div>

            <!-- Filtros Avanzados -->
            @if (MostrarFiltrosAvanzados)
            {
                <hr class="my-3">
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Cliente Específico</label>
                        <select class="form-select" @bind="ClienteFiltro">
                            <option value="">Todos los clientes</option>
                            @if (ClientesDisponibles != null)
                            {
                                @foreach (var cliente in ClientesDisponibles)
                                {
                                    <option value="@cliente.Id">@cliente.DocumentoNombre</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Monto Mínimo</label>
                        <input type="number" class="form-control" @bind="MontoMinimo" placeholder="0" min="0" step="1000" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Monto Máximo</label>
                        <input type="number" class="form-control" @bind="MontoMaximo" placeholder="Sin límite" min="0" step="1000" />
                    </div>
                </div>
            }

            <div class="mt-2">
                <button class="btn btn-link btn-sm p-0" @onclick="ToggleFiltrosAvanzados">
                    <i class="bi @(MostrarFiltrosAvanzados ? "bi-chevron-up" : "bi-chevron-down") me-1"></i>
                    @(MostrarFiltrosAvanzados ? "Ocultar" : "Mostrar") filtros avanzados
                </button>
            </div>
        </div>
    </div>

    @if (ReporteGenerado && DatosReporte != null)
    {
        <!-- Resumen Ejecutivo -->
        <div class="row g-3 mb-4">
            <div class="col-lg-3 col-md-6">
                <div class="summary-card card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="summary-icon bg-primary text-white rounded-circle mx-auto mb-3">
                            <i class="bi bi-currency-dollar"></i>
                        </div>
                        <h3 class="summary-value text-primary">@DatosReporte.TotalVentasFormateado</h3>
                        <p class="summary-label text-muted mb-1">Ventas Totales</p>
                        <small class="text-success">
                            <i class="bi bi-arrow-up"></i> +@CalcularCrecimientoVentas()%
                        </small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6">
                <div class="summary-card card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="summary-icon bg-success text-white rounded-circle mx-auto mb-3">
                            <i class="bi bi-receipt-cutoff"></i>
                        </div>
                        <h3 class="summary-value text-success">@DatosReporte.TotalFacturas</h3>
                        <p class="summary-label text-muted mb-1">Facturas Generadas</p>
                        <small class="text-info">
                            <i class="bi bi-calculator"></i> @CalcularPromedioFacturasDia() /día
                        </small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6">
                <div class="summary-card card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="summary-icon bg-info text-white rounded-circle mx-auto mb-3">
                            <i class="bi bi-graph-up"></i>
                        </div>
                        <h3 class="summary-value text-info">@CalcularTicketPromedio()</h3>
                        <p class="summary-label text-muted mb-1">Ticket Promedio</p>
                        <small class="text-warning">
                            <i class="bi bi-star"></i> Por factura
                        </small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6">
                <div class="summary-card card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="summary-icon bg-warning text-white rounded-circle mx-auto mb-3">
                            <i class="bi bi-people"></i>
                        </div>
                        <h3 class="summary-value text-warning">@ClientesUnicos</h3>
                        <p class="summary-label text-muted mb-1">Clientes Únicos</p>
                        <small class="text-success">
                            <i class="bi bi-person-plus"></i> @ClientesNuevos nuevos
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Gráficos Principales -->
        <div class="row g-4 mb-4">
            <!-- Tendencia de Ventas -->
            <div class="col-lg-8">
                <div class="card shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-graph-up me-2"></i>Tendencia de Ventas
                        </h5>
                        <div class="d-flex gap-2">
                            <div class="btn-group btn-group-sm">
                                <button class="btn @(VistaGrafico == "ventas" ? "btn-primary" : "btn-outline-primary")" 
                                        @onclick='() => CambiarVistaGrafico("ventas")'>Ventas</button>
                                <button class="btn @(VistaGrafico == "facturas" ? "btn-primary" : "btn-outline-primary")" 
                                        @onclick='() => CambiarVistaGrafico("facturas")'>Facturas</button>
                                <button class="btn @(VistaGrafico == "ambos" ? "btn-primary" : "btn-outline-primary")" 
                                        @onclick='() => CambiarVistaGrafico("ambos")'>Ambos</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="chart-container" style="height: 350px;">
                            @if (DatosGrafico?.Any() == true)
                            {
                                <canvas id="ventasTrendChart"></canvas>
                            }
                            else
                            {
                                <div class="d-flex align-items-center justify-content-center h-100">
                                    <div class="text-center">
                                        <i class="bi bi-graph-up display-4 text-muted"></i>
                                        <div class="mt-2 text-muted">No hay datos para el período seleccionado</div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Distribución por Estado -->
            <div class="col-lg-4">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-pie-chart me-2"></i>Distribución por Estado
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (FacturasPorEstado?.Any() == true)
                        {
                            <div class="estado-distribution">
                                @foreach (var estado in FacturasPorEstado)
                                {
                                    <div class="estado-item mb-3">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <span class="d-flex align-items-center">
                                                <StatusBadge Status="@estado.Estado" />
                                                <span class="ms-2">@estado.Estado</span>
                                            </span>
                                            <span class="fw-bold">@estado.Cantidad</span>
                                        </div>
                                        <div class="progress" style="height: 6px;">
                                            <div class="progress-bar @GetEstadoProgressClass(estado.Estado)" 
                                                 style="width: @estado.Porcentaje.ToString("F1")%"></div>
                                        </div>
                                        <small class="text-muted">@estado.Porcentaje.ToString("F1")% del total</small>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-pie-chart display-6 text-muted"></i>
                                <div class="mt-2 text-muted">Sin datos de estados</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Análisis Detallado -->
        <div class="row g-4 mb-4">
            <!-- Top Productos -->
            <div class="col-lg-6">
                <div class="card shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-trophy me-2"></i>Productos Más Vendidos
                        </h5>
                        <a href="/reportes/articulos-mas-vendidos" class="btn btn-outline-primary btn-sm">
                            Ver completo
                        </a>
                    </div>
                    <div class="card-body">
                        @if (ProductosMasVendidos?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th style="width: 40px;">#</th>
                                            <th>Producto</th>
                                            <th class="text-center">Cantidad</th>
                                            <th class="text-end">Ventas</th>
                                            <th class="text-center">%</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var (producto, index) in ProductosMasVendidos.Take(10).Select((p, i) => (p, i + 1)))
                                        {
                                            <tr>
                                                <td>
                                                    <span class="badge @GetRankingBadgeClass(index)">@index</span>
                                                </td>
                                                <td>
                                                    <div class="fw-bold">@producto.Nombre</div>
                                                    <small class="text-muted">@producto.Codigo</small>
                                                </td>
                                                <td class="text-center">
                                                    <span class="badge bg-info">@producto.CantidadVendida</span>
                                                </td>
                                                <td class="text-end">
                                                    <CurrencyDisplay Value="@producto.MontoVendido" ShowSymbol="true" />
                                                </td>
                                                <td class="text-center">
                                                    <small>@CalcularPorcentajeProducto(producto.MontoVendido)%</small>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-trophy display-6 text-muted"></i>
                                <div class="mt-2 text-muted">No hay datos de productos</div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Top Clientes -->
            <div class="col-lg-6">
                <div class="card shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-star me-2"></i>Mejores Clientes
                        </h5>
                        <a href="/reportes/clientes-frecuentes" class="btn btn-outline-primary btn-sm">
                            Ver completo
                        </a>
                    </div>
                    <div class="card-body">
                        @if (ClientesFrecuentes?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th style="width: 40px;">#</th>
                                            <th>Cliente</th>
                                            <th class="text-center">Facturas</th>
                                            <th class="text-end">Compras</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var (cliente, index) in ClientesFrecuentes.Take(10).Select((c, i) => (c, i + 1)))
                                        {
                                            <tr>
                                                <td>
                                                    <span class="badge @GetRankingBadgeClass(index)">@index</span>
                                                </td>
                                                <td>
                                                    <div class="fw-bold">@cliente.NombreCompleto</div>
                                                    <small class="text-muted">@cliente.NumeroDocumento</small>
                                                </td>
                                                <td class="text-center">
                                                    <span class="badge bg-primary">@cliente.TotalFacturas</span>
                                                </td>
                                                <td class="text-end">
                                                    <CurrencyDisplay Value="@cliente.MontoTotalCompras" ShowSymbol="true" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-star display-6 text-muted"></i>
                                <div class="mt-2 text-muted">No hay datos de clientes</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Análisis Financiero -->
        <div class="card shadow-sm mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-calculator me-2"></i>Análisis Financiero Detallado
                </h5>
            </div>
            <div class="card-body">
                <div class="row g-4">
                    <div class="col-lg-6">
                        <h6 class="text-muted mb-3">Desglose de Ingresos</h6>
                        <div class="financial-breakdown">
                            <div class="breakdown-item d-flex justify-content-between py-2">
                                <span>Ventas Brutas:</span>
                                <span class="fw-bold">@CalcularVentasBrutas()</span>
                            </div>
                            <div class="breakdown-item d-flex justify-content-between py-2">
                                <span>Descuentos Aplicados:</span>
                                <span class="fw-bold text-success">@DatosReporte.TotalDescuentosFormateado</span>
                            </div>
                            <div class="breakdown-item d-flex justify-content-between py-2 border-bottom">
                                <span>Subtotal:</span>
                                <span class="fw-bold">@CalcularSubtotal()</span>
                            </div>
                            <div class="breakdown-item d-flex justify-content-between py-2">
                                <span>IVA (19%):</span>
                                <span class="fw-bold text-info">@DatosReporte.TotalIVAFormateado</span>
                            </div>
                            <div class="breakdown-item d-flex justify-content-between py-2 border-top">
                                <span class="fw-bold">Total Neto:</span>
                                <span class="fw-bold text-primary fs-5">@DatosReporte.TotalVentasFormateado</span>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-6">
                        <h6 class="text-muted mb-3">Indicadores de Rendimiento</h6>
                        <div class="performance-indicators">
                            <div class="indicator-item d-flex justify-content-between py-2">
                                <span>Promedio por Factura:</span>
                                <span class="fw-bold">@CalcularTicketPromedio()</span>
                            </div>
                            <div class="indicator-item d-flex justify-content-between py-2">
                                <span>Facturas por Día:</span>
                                <span class="fw-bold">@CalcularPromedioFacturasDia()</span>
                            </div>
                            <div class="indicator-item d-flex justify-content-between py-2">
                                <span>Tasa de Descuento:</span>
                                <span class="fw-bold">@CalcularTasaDescuento()%</span>
                            </div>
                            <div class="indicator-item d-flex justify-content-between py-2">
                                <span>Margen IVA:</span>
                                <span class="fw-bold">@CalcularMargenIVA()%</span>
                            </div>
                            <div class="indicator-item d-flex justify-content-between py-2">
                                <span>Retención Clientes:</span>
                                <span class="fw-bold">@CalcularRetencionClientes()%</span>
                            </div>
                            <div class="indicator-item d-flex justify-content-between py-2">
                                <span>Crecimiento Período:</span>
                                <span class="fw-bold text-success">+@CalcularCrecimientoVentas()%</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Comparativa Temporal -->
        <div class="card shadow-sm mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-calendar-range me-2"></i>Comparativa Temporal
                </h5>
            </div>
            <div class="card-body">
                <div class="row g-4">
                    <div class="col-md-4">
                        <div class="comparison-card text-center p-3 border rounded">
                            <div class="comparison-period text-muted">Período Actual</div>
                            <div class="comparison-dates small text-muted mb-2">
                                @FechaInicio.ToColombiaShortDateString() - @FechaFin.ToColombiaShortDateString()
                            </div>
                            <div class="comparison-value h4 text-primary">@DatosReporte.TotalVentasFormateado</div>
                            <div class="comparison-facturas text-muted">@DatosReporte.TotalFacturas facturas</div>
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="comparison-card text-center p-3 border rounded">
                            <div class="comparison-period text-muted">Período Anterior</div>
                            <div class="comparison-dates small text-muted mb-2">
                                @CalcularFechaInicioAnterior().ToColombiaShortDateString() - @CalcularFechaFinAnterior().ToColombiaShortDateString()
                            </div>
                            <div class="comparison-value h4 text-secondary">@VentasPeriodoAnterior</div>
                            <div class="comparison-facturas text-muted">@FacturasPeriodoAnterior facturas</div>
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="comparison-card text-center p-3 border rounded">
                            <div class="comparison-period text-muted">Variación</div>
                            <div class="comparison-dates small text-muted mb-2">Comparativa</div>
                            <div class="comparison-value h4 @(CrecimientoVentas >= 0 ? "text-success" : "text-danger")">
                                @(CrecimientoVentas >= 0 ? "+" : "")@CrecimientoVentas.ToString("F1")%
                            </div>
                            <div class="comparison-facturas @(CrecimientoFacturas >= 0 ? "text-success" : "text-danger")">
                                @(CrecimientoFacturas >= 0 ? "+" : "")@CrecimientoFacturas facturas
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Acciones y Exportación -->
        <div class="card shadow-sm">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-tools me-2"></i>Acciones del Reporte
                </h5>
            </div>
            <div class="card-body">
                <div class="d-flex gap-2 flex-wrap">
                    <button class="btn btn-success" @onclick="ExportarExcel">
                        <i class="bi bi-file-excel me-1"></i>Exportar a Excel
                    </button>
                    <button class="btn btn-danger" @onclick="ExportarPDF">
                        <i class="bi bi-file-pdf me-1"></i>Exportar a PDF
                    </button>
                    <button class="btn btn-info" @onclick="ExportarCSV">
                        <i class="bi bi-filetype-csv me-1"></i>Exportar a CSV
                    </button>
                    <button class="btn btn-secondary" @onclick="ImprimirReporte">
                        <i class="bi bi-printer me-1"></i>Imprimir Reporte
                    </button>
                    <button class="btn btn-outline-primary" @onclick="EnviarPorEmail">
                        <i class="bi bi-envelope me-1"></i>Enviar por Email
                    </button>
                    <button class="btn btn-outline-warning" @onclick="ProgramarReporte">
                        <i class="bi bi-calendar-event me-1"></i>Programar Envío
                    </button>
                </div>
            </div>
        </div>
    }
    else if (!IsLoading)
    {
        <!-- Estado Inicial -->
        <div class="initial-state text-center py-5">
            <i class="bi bi-graph-up-arrow display-1 text-muted"></i>
            <h3 class="mt-4">Genere su Reporte de Ventas</h3>
            <p class="text-muted mb-4">
                Configure los filtros deseados y genere un análisis completo de las ventas de su negocio.
                <br>Obtenga insights valiosos sobre tendencias, productos top y rendimiento financiero.
            </p>
            <div class="d-flex gap-2 justify-content-center">
                <button class="btn btn-primary btn-lg" @onclick="GenerarReporte" disabled="@(!EsFechaValida)">
                    <i class="bi bi-play-fill me-2"></i>Generar Reporte
                </button>
                <button class="btn btn-outline-secondary btn-lg" @onclick="CargarEjemplo">
                    <i class="bi bi-eye me-2"></i>Ver Ejemplo
                </button>
            </div>
        </div>
    }
</div>

<style>
    .reporte-ventas-container {
        padding: 1rem;
    }

    .page-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-radius: 0.5rem;
        border-left: 4px solid var(--bs-primary);
    }

    .summary-card {
        transition: transform 0.2s ease-in-out;
        border-radius: 0.75rem;
    }

    .summary-card:hover {
        transform: translateY(-3px);
    }

    .summary-icon {
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
    }

    .summary-value {
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .summary-label {
        font-size: 0.875rem;
        font-weight: 500;
    }

    .chart-container {
        position: relative;
        width: 100%;
    }

    .estado-item {
        padding: 0.5rem 0;
    }

    .financial-breakdown .breakdown-item {
        border-bottom: 1px solid var(--bs-border-color);
    }

    .financial-breakdown .breakdown-item:last-child {
        border-bottom: none;
    }

    .performance-indicators .indicator-item {
        padding: 0.5rem 0;
        border-bottom: 1px solid var(--bs-border-color);
    }

    .performance-indicators .indicator-item:last-child {
        border-bottom: none;
    }

    .comparison-card {
        transition: box-shadow 0.15s ease-in-out;
    }

    .comparison-card:hover {
        box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
    }

    .comparison-period {
        font-weight: 600;
        font-size: 0.875rem;
    }

    .comparison-value {
        margin: 0.5rem 0;
    }

    .initial-state {
        min-height: 400px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border-radius: 0.75rem;
    }

    .card-header {
        background-color: var(--bs-light);
        border-bottom: 1px solid var(--bs-border-color);
        border-radius: 0.75rem 0.75rem 0 0 !important;
    }

    @@media (max-width: 768px) {
        .page-header {
            padding: 1rem;
        }

        .summary-value {
            font-size: 1.5rem;
        }

        .d-flex.gap-2.flex-wrap {
            flex-direction: column;
        }

        .d-flex.gap-2.flex-wrap .btn {
            margin-bottom: 0.5rem;
        }
    }
</style>

@code {
    private Alert? AlertComponent;

    // Estado del componente
    private bool IsLoading = false;
    private bool ReporteGenerado = false;
    private bool MostrarFiltrosAvanzados = false;

    // Filtros
    private DateTime FechaInicio = DateTime.Now.StartOfMonth();
    private DateTime FechaFin = DateTime.Now;
    private string EstadoFiltro = "";
    private string TipoAgrupacion = "mensual";
    private int ClienteFiltro = 0;
    private decimal? MontoMinimo = null;
    private decimal? MontoMaximo = null;

    // Validación
    private bool HasFechaError => !EsFechaValida;
    private string FechaErrorMessage = "";
    private bool EsFechaValida => FechaInicio <= FechaFin && FechaInicio <= DateTime.Now && FechaFin <= DateTime.Now;

    // Datos del reporte
    private ReporteVentasDto? DatosReporte;
    private List<VentaPorPeriodoDto>? DatosGrafico;
    private List<FacturaPorEstadoDto>? FacturasPorEstado;
    private List<ArticuloVendidoDto>? ProductosMasVendidos;
    private List<ClienteFrecuenteDto>? ClientesFrecuentes;
    private List<ClienteDto>? ClientesDisponibles;

    // Métricas adicionales
    private int ClientesUnicos = 0;
    private int ClientesNuevos = 0;
    private string VistaGrafico = "ventas";

    // Comparativa temporal
    private string VentasPeriodoAnterior = "$0";
    private int FacturasPeriodoAnterior = 0;
    private decimal CrecimientoVentas = 0;
    private int CrecimientoFacturas = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarClientesDisponibles();
        
        // Verificar si hay parámetros en la URL
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var autoGenerar = query["auto"] == "true";

        if (autoGenerar)
        {
            await GenerarReporte();
        }
    }

    private async Task CargarClientesDisponibles()
    {
        try
        {
            var result = await ClienteService.GetAll();
            if (result.Success && result.Data != null)
            {
                ClientesDisponibles = result.Data.Where(c => c.Activo).Take(100).ToList();
            }
        }
        catch (Exception)
        {
            ClientesDisponibles = new List<ClienteDto>();
        }
    }

    private async Task GenerarReporte()
    {
        if (!EsFechaValida)
        {
            ValidarFechas();
            return;
        }

        try
        {
            IsLoading = true;
            StateHasChanged();

            // Generar reporte principal
            var result = await ReporteService.GenerarReporteVentas(FechaInicio, FechaFin);
            if (result.Success && result.Data != null)
            {
                DatosReporte = result.Data;
                
                // Cargar datos adicionales en paralelo
                var tasks = new List<Task>
                {
                    CargarDatosGrafico(),
                    CargarFacturasPorEstado(),
                    CargarProductosMasVendidos(),
                    CargarClientesFrecuentes(),
                    CargarMetricasAdicionales(),
                    CargarComparativaTemporal()
                };

                await Task.WhenAll(tasks);

                ReporteGenerado = true;

                AlertComponent?.Show(
                    "Reporte de ventas generado exitosamente",
                    AlertType.Success,
                    "Reporte Completo"
                );
            }
            else
            {
                AlertComponent?.Show(
                    result.Message ?? "Error al generar el reporte de ventas",
                    AlertType.Danger,
                    "Error"
                );
                ReporteGenerado = false;
            }
        }
        catch (Exception ex)
        {
            AlertComponent?.Show(
                $"Error al generar el reporte: {ex.Message}",
                AlertType.Danger,
                "Error"
            );
            ReporteGenerado = false;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task CargarDatosGrafico()
    {
        try
        {
            // Simular datos del gráfico basados en el tipo de agrupación
            DatosGrafico = new List<VentaPorPeriodoDto>();
            
            var diasPeriodo = (FechaFin - FechaInicio).Days + 1;
            var incremento = TipoAgrupacion switch
            {
                "diario" => 1,
                "semanal" => 7,
                "mensual" => 30,
                "trimestral" => 90,
                _ => 1
            };

            for (var fecha = FechaInicio; fecha <= FechaFin; fecha = fecha.AddDays(incremento))
            {
                DatosGrafico.Add(new VentaPorPeriodoDto
                {
                    Periodo = fecha.ToString("yyyy-MM-dd"),
                    Ventas = Random.Shared.Next(100000, 1000000),
                    Facturas = Random.Shared.Next(10, 50)
                });
            }
        }
        catch (Exception)
        {
            DatosGrafico = new List<VentaPorPeriodoDto>();
        }
    }

    private async Task CargarFacturasPorEstado()
    {
        try
        {
            var result = await ReporteService.GetFacturasPorEstado();
            if (result.Success && result.Data != null)
            {
                // Convertir datos del resultado
                FacturasPorEstado = new List<FacturaPorEstadoDto>();
            }
        }
        catch (Exception)
        {
            FacturasPorEstado = new List<FacturaPorEstadoDto>();
        }
    }

    private async Task CargarProductosMasVendidos()
    {
        try
        {
            var result = await ReporteService.GetArticulosMasVendidos(FechaInicio, FechaFin, 15);
            if (result.Success && result.Data != null)
            {
                ProductosMasVendidos = result.Data;
            }
        }
        catch (Exception)
        {
            ProductosMasVendidos = new List<ArticuloVendidoDto>();
        }
    }

    private async Task CargarClientesFrecuentes()
    {
        try
        {
            var result = await ReporteService.GetClientesFrecuentes(FechaInicio, FechaFin, 15);
            if (result.Success && result.Data != null)
            {
                ClientesFrecuentes = result.Data;
            }
        }
        catch (Exception)
        {
            ClientesFrecuentes = new List<ClienteFrecuenteDto>();
        }
    }

    private async Task CargarMetricasAdicionales()
    {
        try
        {
            // Simular métricas adicionales
            ClientesUnicos = ClientesFrecuentes?.Count ?? 0;
            ClientesNuevos = Random.Shared.Next(5, 20);
        }
        catch (Exception)
        {
            // Manejar errores silenciosamente
        }
    }

    private async Task CargarComparativaTemporal()
    {
        try
        {
            var diasPeriodo = (FechaFin - FechaInicio).Days;
            var fechaInicioAnterior = FechaInicio.AddDays(-diasPeriodo - 1);
            var fechaFinAnterior = FechaInicio.AddDays(-1);

            var result = await ReporteService.GenerarReporteVentas(fechaInicioAnterior, fechaFinAnterior);
            if (result.Success && result.Data != null)
            {
                VentasPeriodoAnterior = result.Data.TotalVentasFormateado ?? "$0";
                FacturasPeriodoAnterior = result.Data.TotalFacturas;

                if (result.Data.TotalVentas > 0 && DatosReporte != null)
                {
                    CrecimientoVentas = ((DatosReporte.TotalVentas - result.Data.TotalVentas) / result.Data.TotalVentas) * 100;
                }
                CrecimientoFacturas = DatosReporte?.TotalFacturas - result.Data.TotalFacturas ?? 0;
            }
        }
        catch (Exception)
        {
            // Manejar errores silenciosamente
        }
    }

    // Métodos de filtros rápidos
    private async Task SetUltimos7Dias()
    {
        FechaFin = DateTime.Today;
        FechaInicio = FechaFin.AddDays(-6);
        await GenerarReporte();
    }

    private async Task SetUltimos30Dias()
    {
        FechaFin = DateTime.Today;
        FechaInicio = FechaFin.AddDays(-29);
        await GenerarReporte();
    }

    private async Task SetEsteMes()
    {
        FechaInicio = DateTime.Now.StartOfMonth();
        FechaFin = DateTime.Today;
        await GenerarReporte();
    }

    private async Task SetMesAnterior()
    {
        var mesAnterior = DateTime.Now.AddMonths(-1);
        FechaInicio = mesAnterior.StartOfMonth();
        FechaFin = mesAnterior.EndOfMonth().Date;
        await GenerarReporte();
    }

    private async Task SetUltimos3Meses()
    {
        FechaFin = DateTime.Today;
        FechaInicio = FechaFin.AddMonths(-3);
        await GenerarReporte();
    }

    private async Task SetEsteAño()
    {
        FechaInicio = DateTime.Now.StartOfYear();
        FechaFin = DateTime.Today;
        await GenerarReporte();
    }

    // Métodos utilitarios
    private void ValidarFechas()
    {
        if (FechaInicio > FechaFin)
        {
            FechaErrorMessage = "La fecha de inicio no puede ser mayor a la fecha de fin";
        }
        else if (FechaInicio > DateTime.Now)
        {
            FechaErrorMessage = "La fecha de inicio no puede ser futura";
        }
        else if (FechaFin > DateTime.Now)
        {
            FechaErrorMessage = "La fecha de fin no puede ser futura";
        }
        else
        {
            FechaErrorMessage = "";
        }
    }

    private void LimpiarFiltros()
    {
        FechaInicio = DateTime.Now.StartOfMonth();
        FechaFin = DateTime.Now;
        EstadoFiltro = "";
        TipoAgrupacion = "mensual";
        ClienteFiltro = 0;
        MontoMinimo = null;
        MontoMaximo = null;
        MostrarFiltrosAvanzados = false;
    }

    private void ToggleFiltrosAvanzados()
    {
        MostrarFiltrosAvanzados = !MostrarFiltrosAvanzados;
    }

    private void CambiarVistaGrafico(string vista)
    {
        VistaGrafico = vista;
        StateHasChanged();
    }

    // Métodos de cálculo
    private decimal CalcularCrecimientoVentas()
    {
        return Math.Round(CrecimientoVentas, 1);
    }

    private decimal CalcularPromedioFacturasDia()
    {
        if (DatosReporte == null) return 0;
        var dias = (FechaFin - FechaInicio).Days + 1;
        return dias > 0 ? Math.Round((decimal)DatosReporte.TotalFacturas / dias, 1) : 0;
    }

    private string CalcularTicketPromedio()
    {
        if (DatosReporte == null || DatosReporte.TotalFacturas == 0) return "$0";
        var promedio = DatosReporte.TotalVentas / DatosReporte.TotalFacturas;
        return CurrencyHelper.FormatCurrency(promedio);
    }

    private string CalcularVentasBrutas()
    {
        if (DatosReporte == null) return "$0";
        var brutas = DatosReporte.TotalVentas + DatosReporte.TotalDescuentos;
        return CurrencyHelper.FormatCurrency(brutas);
    }

    private string CalcularSubtotal()
    {
        if (DatosReporte == null) return "$0";
        var subtotal = DatosReporte.TotalVentas - DatosReporte.TotalIVA;
        return CurrencyHelper.FormatCurrency(subtotal);
    }

    private decimal CalcularTasaDescuento()
    {
        if (DatosReporte == null || DatosReporte.TotalVentas == 0) return 0;
        return Math.Round((DatosReporte.TotalDescuentos / DatosReporte.TotalVentas) * 100, 1);
    }

    private decimal CalcularMargenIVA()
    {
        if (DatosReporte == null || DatosReporte.TotalVentas == 0) return 0;
        return Math.Round((DatosReporte.TotalIVA / DatosReporte.TotalVentas) * 100, 1);
    }

    private decimal CalcularRetencionClientes()
    {
        return 85.5m; // Simulado
    }

    private decimal CalcularPorcentajeProducto(decimal montoProducto)
    {
        if (DatosReporte == null || DatosReporte.TotalVentas == 0) return 0;
        return Math.Round((montoProducto / DatosReporte.TotalVentas) * 100, 1);
    }

    private DateTime CalcularFechaInicioAnterior()
    {
        var diasPeriodo = (FechaFin - FechaInicio).Days;
        return FechaInicio.AddDays(-diasPeriodo - 1);
    }

    private DateTime CalcularFechaFinAnterior()
    {
        return FechaInicio.AddDays(-1);
    }

    private string GetEstadoProgressClass(string estado)
    {
        return estado.ToLower() switch
        {
            "activa" => "bg-success",
            "anulada" => "bg-danger",
            "pagada" => "bg-primary",
            "pendiente" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private string GetRankingBadgeClass(int position)
    {
        return position switch
        {
            1 => "bg-warning",
            2 => "bg-secondary",
            3 => "bg-danger",
            _ => "bg-primary"
        };
    }

    // Métodos de exportación
    private async Task ExportarExcel()
    {
        AlertComponent?.Show("Función de exportación a Excel próximamente disponible", AlertType.Info);
        await Task.CompletedTask;
    }

    private async Task ExportarPDF()
    {
        AlertComponent?.Show("Función de exportación a PDF próximamente disponible", AlertType.Info);
        await Task.CompletedTask;
    }

    private async Task ExportarCSV()
    {
        AlertComponent?.Show("Función de exportación a CSV próximamente disponible", AlertType.Info);
        await Task.CompletedTask;
    }

    private async Task ImprimirReporte()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("window.print");
        }
        catch (Exception ex)
        {
            AlertComponent?.Show($"Error al imprimir: {ex.Message}", AlertType.Warning);
        }
    }

    private async Task EnviarPorEmail()
    {
        AlertComponent?.Show("Función de envío por email próximamente disponible", AlertType.Info);
        await Task.CompletedTask;
    }

    private async Task ProgramarReporte()
    {
        AlertComponent?.Show("Función de programación de reportes próximamente disponible", AlertType.Info);
        await Task.CompletedTask;
    }

    private async Task CargarEjemplo()
    {
        FechaInicio = DateTime.Now.AddDays(-30);
        FechaFin = DateTime.Now;
        await GenerarReporte();
    }

    // DTOs auxiliares
    public class VentaPorPeriodoDto
    {
        public string Periodo { get; set; } = "";
        public decimal Ventas { get; set; }
        public int Facturas { get; set; }
    }

    public class FacturaPorEstadoDto
    {
        public string Estado { get; set; } = "";
        public int Cantidad { get; set; }
        public decimal Porcentaje { get; set; }
    }
}