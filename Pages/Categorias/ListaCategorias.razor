@page "/categorias"
@using FacturacionPortal.WEB.Models.Facturacion
@using FacturacionPortal.WEB.Services.Interface
@using FacturacionPortal.WEB.Shared.Components
@using FacturacionPortal.WEB.Components.Shared
@using FacturacionPortal.WEB.Helpers
@using FacturacionPortal.WEB.Util
@using FacturacionPortal.WEB.Util.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@inject ICategoriaArticuloService CategoriaService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Categorías - FacturacionPortal</PageTitle>

<div class="categorias-container">
    <!-- Header -->
    <div class="page-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="mb-1">
                    <i class="bi bi-tags text-primary me-2"></i>
                    Gestión de Categorías
                </h2>
                <p class="text-muted mb-0">Administre las categorías de artículos del sistema</p>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-success" @onclick="CrearCategoria">
                    <i class="bi bi-plus-circle me-1"></i>Nueva Categoría
                </button>
                <button class="btn btn-outline-primary" @onclick="RefreshData" disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-1"></span>
                    }
                    else
                    {
                        <i class="bi bi-arrow-clockwise me-1"></i>
                    }
                    Actualizar
                </button>
            </div>
        </div>
    </div>

    <Alert @ref="AlertComponent" />

    <!-- Filtros y Búsqueda -->
    <div class="card shadow-sm mb-4">
        <div class="card-header">
            <h6 class="card-title mb-0">
                <i class="bi bi-funnel me-2"></i>Filtros de Búsqueda
            </h6>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" 
                               class="form-control" 
                               placeholder="Buscar por nombre o descripción..."
                               @bind="SearchTerm" 
                               @bind:event="oninput"
                               @onkeypress="OnSearchKeyPress" />
                        @if (!string.IsNullOrEmpty(SearchTerm))
                        {
                            <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearch">
                                <i class="bi bi-x"></i>
                            </button>
                        }
                    </div>
                </div>
                
                <div class="col-md-3">
                    <select class="form-select" value="@FiltroEstado" @onchange="OnFiltroEstadoChanged">
                        <option value="">Todos los estados</option>
                        <option value="true">Activas</option>
                        <option value="false">Inactivas</option>
                    </select>
                </div>
                
                <div class="col-md-3">
                    <select class="form-select" value="@ElementosPorPagina" @onchange="OnPageSizeChanged">
                        <option value="10">10 por página</option>
                        <option value="25">25 por página</option>
                        <option value="50">50 por página</option>
                        <option value="100">100 por página</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Lista de Categorías -->
    <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h6 class="card-title mb-0">
                <i class="bi bi-list-ul me-2"></i>Lista de Categorías
            </h6>
            @if (PaginationData != null)
            {
                <span class="badge bg-primary">
                    @PaginationData.TotalRegistros categoría(s)
                </span>
            }
        </div>
        <div class="card-body p-0">
            @if (IsLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <div class="mt-2">Cargando categorías...</div>
                </div>
            }
            else if (Categorias == null || !Categorias.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-tags display-1 text-muted"></i>
                    <h4 class="mt-3">No se encontraron categorías</h4>
                    <p class="text-muted">
                        @(string.IsNullOrEmpty(SearchTerm) ? 
                          "No hay categorías registradas en el sistema." : 
                          "No hay categorías que coincidan con su búsqueda.")
                    </p>
                    @if (string.IsNullOrEmpty(SearchTerm))
                    {
                        <button class="btn btn-primary" @onclick="CrearCategoria">
                            <i class="bi bi-plus-circle me-1"></i>Crear Primera Categoría
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                            <i class="bi bi-x me-1"></i>Limpiar Búsqueda
                        </button>
                    }
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th style="width: 80px;">#</th>
                                <th>Nombre</th>
                                <th>Descripción</th>
                                <th class="text-center" style="width: 120px;">Artículos</th>
                                <th class="text-center" style="width: 100px;">Estado</th>
                                <th class="text-center" style="width: 140px;">Fecha Creación</th>
                                <th class="text-center" style="width: 120px;">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (categoria, index) in Categorias.Select((c, i) => (c, i + 1 + ((PaginaActual - 1) * ElementosPorPagina))))
                            {
                                <tr class="@(categoria.Activo ? "" : "table-secondary")">
                                    <td>
                                        <span class="badge bg-secondary">@index</span>
                                    </td>
                                    <td>
                                        <div class="fw-bold">@categoria.Nombre</div>
                                        @if (!string.IsNullOrEmpty(categoria.CreadoPor))
                                        {
                                            <small class="text-muted">Por: @categoria.CreadoPor</small>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(categoria.Descripcion))
                                        {
                                            <span>@categoria.Descripcion</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted fst-italic">Sin descripción</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        <span class="badge bg-info">@categoria.TotalArticulos</span>
                                    </td>
                                    <td class="text-center">
                                        <StatusBadge Status="@(categoria.Activo ? "Activo" : "Inactivo")" />
                                    </td>
                                    <td class="text-center">
                                        <div>@categoria.FechaCreacion.ToColombiaShortDateString()</div>
                                        <small class="text-muted">@categoria.FechaCreacion.ToTimeString()</small>
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button class="btn btn-outline-primary" 
                                                    @onclick="() => VerCategoria(categoria.Id)" 
                                                    title="Ver detalles">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-warning" 
                                                    @onclick="() => EditarCategoria(categoria.Id)" 
                                                    title="Editar">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            @if (categoria.TotalArticulos == 0)
                                            {
                                                <button class="btn btn-outline-danger" 
                                                        @onclick="() => EliminarCategoria(categoria)" 
                                                        title="Eliminar">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-secondary" 
                                                        @onclick="() => ToggleEstado(categoria)" 
                                                        title="@(categoria.Activo ? "Desactivar" : "Activar")">
                                                    <i class="bi @(categoria.Activo ? "bi-toggle-on" : "bi-toggle-off")"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (PaginationData != null && PaginationData.TotalPaginas > 1)
                {
                    <div class="card-footer">
                        <Pagination TItem="CategoriaArticuloDto" 
                                    PaginationInfo="PaginationData"
                                    OnPageChanged="OnPageChanged"
                                    OnPageSizeChanged="OnPageSizeChangedHandler"
                                    CurrentPageSize="ElementosPorPagina"
                                    ShowInfo="true"
                                    ShowPageSizeSelector="false" />
                    </div>
                }
            }
        </div>
    </div>

    <!-- Estadísticas Rápidas -->
    @if (EstadisticasGenerales != null && !IsLoading)
    {
        <div class="row g-3 mt-4">
            <div class="col-lg-3 col-md-6">
                <div class="card bg-primary text-white">
                    <div class="card-body text-center">
                        <i class="bi bi-tags display-6 mb-2"></i>
                        <h3>@EstadisticasGenerales.TotalCategorias</h3>
                        <small>Total Categorías</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card bg-success text-white">
                    <div class="card-body text-center">
                        <i class="bi bi-check-circle display-6 mb-2"></i>
                        <h3>@EstadisticasGenerales.CategoriasActivas</h3>
                        <small>Activas</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card bg-info text-white">
                    <div class="card-body text-center">
                        <i class="bi bi-box-seam display-6 mb-2"></i>
                        <h3>@EstadisticasGenerales.TotalArticulos</h3>
                        <small>Total Artículos</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card bg-warning text-white">
                    <div class="card-body text-center">
                        <i class="bi bi-exclamation-triangle display-6 mb-2"></i>
                        <h3>@EstadisticasGenerales.CategoriasSinArticulos</h3>
                        <small>Sin Artículos</small>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<Confirm @ref="ConfirmDialog" />

<style>
    .categorias-container {
        padding: 1rem;
    }

    .page-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-radius: 0.5rem;
        border-left: 4px solid var(--bs-primary);
    }

    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .card-header {
        background-color: var(--bs-light);
        border-bottom: 1px solid var(--bs-border-color);
    }

    .table-responsive {
        border-radius: 0.375rem;
    }

    .table thead th {
        border-bottom: 2px solid var(--bs-border-color);
        font-weight: 600;
    }

    .btn-group .btn {
        border-radius: 0.25rem;
        margin: 0 1px;
    }

    .table-secondary {
        opacity: 0.7;
    }

    @@media (max-width: 768px) {
        .page-header {
            padding: 1rem;
        }

        .btn-group {
            flex-direction: column;
        }

        .btn-group .btn {
            margin: 1px 0;
        }
    }
</style>

@code {
    private Alert? AlertComponent;
    private Confirm? ConfirmDialog;

    private bool IsLoading = true;
    private string SearchTerm = "";
    private string FiltroEstado = "";
    private int PaginaActual = 1;
    private int ElementosPorPagina = 10;
    private Timer? _searchTimer;

    private List<CategoriaArticuloDto>? Categorias;
    private Models.Common.PaginacionDto<CategoriaArticuloDto>? PaginationData;
    private EstadisticasCategoriasDto? EstadisticasGenerales;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategorias();
        await LoadEstadisticas();
    }

    private async Task LoadCategorias()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            bool? activo = null;
            if (!string.IsNullOrEmpty(FiltroEstado))
            {
                activo = bool.Parse(FiltroEstado);
            }

            var result = await CategoriaService.GetPaginated(
                PaginaActual,
                ElementosPorPagina,
                string.IsNullOrEmpty(SearchTerm) ? null : SearchTerm
            );

            if (result.Success && result.Data != null)
            {
                PaginationData = result.Data;
                Categorias = result.Data.Lista?.ToList();
            }
            else
            {
                AlertComponent?.Show(
                    result.Message ?? "Error al cargar las categorías",
                    AlertType.Danger,
                    "Error"
                );
                Categorias = new List<CategoriaArticuloDto>();
            }
        }
        catch (Exception ex)
        {
            AlertComponent?.Show(
                $"Error de conexión: {ex.Message}",
                AlertType.Danger,
                "Error"
            );
            Categorias = new List<CategoriaArticuloDto>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadEstadisticas()
    {
        try
        {
            var todasResult = await CategoriaService.GetAll();
            if (todasResult.Success && todasResult.Data != null)
            {
                var todas = todasResult.Data;
                EstadisticasGenerales = new EstadisticasCategoriasDto
                {
                    TotalCategorias = todas.Count,
                    CategoriasActivas = todas.Count(c => c.Activo),
                    TotalArticulos = todas.Sum(c => c.TotalArticulos),
                    CategoriasSinArticulos = todas.Count(c => c.TotalArticulos == 0)
                };
            }
        }
        catch (Exception)
        {
            // Error silencioso para estadísticas
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _searchTimer?.Dispose();
            await SearchCategorias();
        }
        else
        {
            SetSearchTimer();
        }
    }

    private void SetSearchTimer()
    {
        _searchTimer?.Dispose();
        _searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(SearchCategorias);
        }, null, 500, Timeout.Infinite);
    }

    private async Task SearchCategorias()
    {
        PaginaActual = 1;
        await LoadCategorias();
    }

    private async Task ClearSearch()
    {
        SearchTerm = "";
        FiltroEstado = "";
        PaginaActual = 1;
        await LoadCategorias();
    }

    private async Task OnFiltroEstadoChanged()
    {
        PaginaActual = 1;
        await LoadCategorias();
    }

    private async Task OnPageSizeChanged()
    {
        PaginaActual = 1;
        await LoadCategorias();
    }

    private async Task OnPageSizeChangedHandler(int newPageSize)
    {
        ElementosPorPagina = newPageSize;
        await OnPageSizeChanged();
    }

    private async Task OnPageChanged(int newPage)
    {
        PaginaActual = newPage;
        await LoadCategorias();
    }

    private async Task RefreshData()
    {
        await LoadCategorias();
        await LoadEstadisticas();
    }

    private void CrearCategoria()
    {
        Navigation.NavigateTo("/categorias/crear");
    }

    private void VerCategoria(int categoriaId)
    {
        Navigation.NavigateTo($"/categorias/{categoriaId}");
    }

    private void EditarCategoria(int categoriaId)
    {
        Navigation.NavigateTo($"/categorias/editar/{categoriaId}");
    }

    private async Task EliminarCategoria(CategoriaArticuloDto categoria)
    {
        if (ConfirmDialog != null)
        {
            var confirmed = await ConfirmDialog.ShowAsync(
                "Eliminar Categoría",
                $"¿Está seguro que desea eliminar la categoría '{categoria.Nombre}'? Esta acción no se puede deshacer.",
                ConfirmType.Danger
            );

            if (confirmed)
            {
                try
                {
                    var result = await CategoriaService.Delete(categoria.Id);
                    if (result.Success)
                    {
                        AlertComponent?.Show(
                            "Categoría eliminada exitosamente",
                            AlertType.Success,
                            "Eliminación Exitosa"
                        );
                        await LoadCategorias();
                        await LoadEstadisticas();
                    }
                    else
                    {
                        AlertComponent?.Show(
                            result.Message ?? "Error al eliminar la categoría",
                            AlertType.Danger,
                            "Error"
                        );
                    }
                }
                catch (Exception ex)
                {
                    AlertComponent?.Show(
                        $"Error al eliminar: {ex.Message}",
                        AlertType.Danger,
                        "Error"
                    );
                }
            }
        }
    }

    private async Task ToggleEstado(CategoriaArticuloDto categoria)
    {
        if (ConfirmDialog != null)
        {
            var accion = categoria.Activo ? "desactivar" : "activar";
            var confirmed = await ConfirmDialog.ShowAsync(
                $"{char.ToUpper(accion[0])}{accion.Substring(1)} Categoría",
                $"¿Está seguro que desea {accion} la categoría '{categoria.Nombre}'?",
                categoria.Activo ? ConfirmType.Warning : ConfirmType.Info
            );

            if (confirmed)
            {
                try
                {
                    categoria.Activo = !categoria.Activo;
                    var result = await CategoriaService.Update(categoria.Id, categoria);
                    
                    if (result.Success)
                    {
                        AlertComponent?.Show(
                            $"Categoría {(categoria.Activo ? "activada" : "desactivada")} exitosamente",
                            AlertType.Success,
                            "Estado Actualizado"
                        );
                        await LoadCategorias();
                        await LoadEstadisticas();
                    }
                    else
                    {
                        categoria.Activo = !categoria.Activo; // Revertir cambio
                        AlertComponent?.Show(
                            result.Message ?? "Error al cambiar el estado",
                            AlertType.Danger,
                            "Error"
                        );
                    }
                }
                catch (Exception ex)
                {
                    categoria.Activo = !categoria.Activo; // Revertir cambio
                    AlertComponent?.Show(
                        $"Error al cambiar estado: {ex.Message}",
                        AlertType.Danger,
                        "Error"
                    );
                }
            }
        }
    }

    public void Dispose()
    {
        _searchTimer?.Dispose();
    }

    // DTO para estadísticas
    public class EstadisticasCategoriasDto
    {
        public int TotalCategorias { get; set; }
        public int CategoriasActivas { get; set; }
        public int TotalArticulos { get; set; }
        public int CategoriasSinArticulos { get; set; }
    }
}