@page "/facturas/reporte"
@using FacturacionPortal.WEB.Models.Facturacion
@using FacturacionPortal.WEB.Services.Interface
@using FacturacionPortal.WEB.Shared.Components
@using FacturacionPortal.WEB.Components.Shared
@using FacturacionPortal.WEB.Helpers
@using FacturacionPortal.WEB.Util
@using FacturacionPortal.WEB.Util.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@inject IFacturaService FacturaService
@inject IReporteService ReporteService
@inject IClienteService ClienteService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Reporte de Facturas - FacturacionPortal</PageTitle>

<div class="reporte-facturas-container">
    <!-- Header -->
    <div class="page-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="mb-1">
                    <i class="bi bi-graph-up text-primary me-2"></i>
                    Reporte de Facturas
                </h2>
                <p class="text-muted mb-0">Análisis detallado de ventas y facturación</p>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-secondary" @onclick="ExportarReporte" disabled="@IsLoading">
                    <i class="bi bi-download me-1"></i>Exportar
                </button>
                <button class="btn btn-outline-primary" @onclick="GenerarReporte" disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-1"></span>
                    }
                    else
                    {
                        <i class="bi bi-arrow-clockwise me-1"></i>
                    }
                    Actualizar
                </button>
            </div>
        </div>
    </div>

    <Alert @ref="AlertComponent" />

    <!-- Filtros de Reporte -->
    <div class="card shadow-sm mb-4">
        <div class="card-header">
            <h6 class="card-title mb-0">
                <i class="bi bi-sliders me-2"></i>Parámetros del Reporte
            </h6>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Fecha Inicio *</label>
                    <input type="date" 
                           class="form-control @(HasFechaError ? "is-invalid" : "")"
                           @bind="FechaInicio"
                           max="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    @if (HasFechaError)
                    {
                        <div class="invalid-feedback">@FechaErrorMessage</div>
                    }
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Fin *</label>
                    <input type="date" 
                           class="form-control @(HasFechaError ? "is-invalid" : "")"
                           @bind="FechaFin"
                           max="@DateTime.Now.ToString("yyyy-MM-dd")" />
                </div>

                <div class="col-md-2">
                    <label class="form-label">Estado</label>
                    <select class="form-select" @bind="EstadoFiltro">
                        <option value="">Todos</option>
                        <option value="Activa">Activa</option>
                        <option value="Anulada">Anulada</option>
                        <option value="Pagada">Pagada</option>
                        <option value="Pendiente">Pendiente</option>
                    </select>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Cliente</label>
                    <select class="form-select" @bind="ClienteFiltro">
                        <option value="">Todos los clientes</option>
                        @if (ClientesDisponibles != null)
                        {
                            @foreach (var cliente in ClientesDisponibles)
                            {
                                <option value="@cliente.Id">@cliente.DocumentoNombre</option>
                            }
                        }
                    </select>
                </div>

                <div class="col-md-1">
                    <label class="form-label">&nbsp;</label>
                    <button class="btn btn-primary w-100" @onclick="GenerarReporte" disabled="@(IsLoading || !EsFechaValida)">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm"></span>
                        }
                        else
                        {
                            <i class="bi bi-play-fill"></i>
                        }
                    </button>
                </div>
            </div>

            <!-- Rangos rápidos -->
            <div class="mt-3">
                <small class="text-muted me-2">Rangos rápidos:</small>
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-secondary" @onclick="SetHoy">Hoy</button>
                    <button class="btn btn-outline-secondary" @onclick="SetAyer">Ayer</button>
                    <button class="btn btn-outline-secondary" @onclick="SetEstaSemana">Esta Semana</button>
                    <button class="btn btn-outline-secondary" @onclick="SetEsteMes">Este Mes</button>
                    <button class="btn btn-outline-secondary" @onclick="SetMesAnterior">Mes Anterior</button>
                    <button class="btn btn-outline-secondary" @onclick="SetEsteAño">Este Año</button>
                </div>
            </div>
        </div>
    </div>

    @if (ReporteGenerado && ReporteVentas != null)
    {
        <!-- Resumen Ejecutivo -->
        <div class="row g-3 mb-4">
            <div class="col-lg-3 col-md-6">
                <div class="metric-card card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="metric-icon bg-primary text-white rounded-circle mx-auto mb-2">
                            <i class="bi bi-receipt"></i>
                        </div>
                        <h3 class="metric-number text-primary">@ReporteVentas.TotalFacturas</h3>
                        <small class="text-muted">Total Facturas</small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6">
                <div class="metric-card card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="metric-icon bg-success text-white rounded-circle mx-auto mb-2">
                            <i class="bi bi-currency-dollar"></i>
                        </div>
                        <h3 class="metric-number text-success">@ReporteVentas.TotalVentasFormateado</h3>
                        <small class="text-muted">Total Ventas</small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6">
                <div class="metric-card card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="metric-icon bg-info text-white rounded-circle mx-auto mb-2">
                            <i class="bi bi-percent"></i>
                        </div>
                        <h3 class="metric-number text-info">@ReporteVentas.TotalIVAFormateado</h3>
                        <small class="text-muted">Total IVA</small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6">
                <div class="metric-card card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="metric-icon bg-warning text-white rounded-circle mx-auto mb-2">
                            <i class="bi bi-tag"></i>
                        </div>
                        <h3 class="metric-number text-warning">@ReporteVentas.TotalDescuentosFormateado</h3>
                        <small class="text-muted">Total Descuentos</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Análisis Detallado -->
        <div class="row g-4 mb-4">
            <!-- Artículos Más Vendidos -->
            <div class="col-lg-6">
                <div class="card shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-trophy me-2"></i>Artículos Más Vendidos
                        </h6>
                        <span class="badge bg-primary">Top @(ReporteVentas.ArticulosMasVendidos?.Count ?? 0)</span>
                    </div>
                    <div class="card-body">
                        @if (ReporteVentas.ArticulosMasVendidos?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th style="width: 40px;">#</th>
                                            <th>Artículo</th>
                                            <th class="text-center">Cantidad</th>
                                            <th class="text-end">Monto</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var (articulo, index) in ReporteVentas.ArticulosMasVendidos.Take(10).Select((a, i) => (a, i + 1)))
                                        {
                                            <tr>
                                                <td>
                                                    <span class="badge bg-secondary">@index</span>
                                                </td>
                                                <td>
                                                    <div class="fw-bold">@articulo.Nombre</div>
                                                    <small class="text-muted">@articulo.Codigo</small>
                                                </td>
                                                <td class="text-center">
                                                    <span class="badge bg-info">@articulo.CantidadVendida</span>
                                                </td>
                                                <td class="text-end">
                                                    <CurrencyDisplay Value="@articulo.MontoVendido" ShowSymbol="true" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="bi bi-trophy display-6 text-muted"></i>
                                <div class="mt-2 text-muted">No hay datos disponibles</div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Clientes Frecuentes -->
            <div class="col-lg-6">
                <div class="card shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-star me-2"></i>Clientes Frecuentes
                        </h6>
                        <span class="badge bg-success">Top @(ReporteVentas.ClientesFrecuentes?.Count ?? 0)</span>
                    </div>
                    <div class="card-body">
                        @if (ReporteVentas.ClientesFrecuentes?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th style="width: 40px;">#</th>
                                            <th>Cliente</th>
                                            <th class="text-center">Facturas</th>
                                            <th class="text-end">Monto</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var (cliente, index) in ReporteVentas.ClientesFrecuentes.Take(10).Select((c, i) => (c, i + 1)))
                                        {
                                            <tr>
                                                <td>
                                                    <span class="badge bg-secondary">@index</span>
                                                </td>
                                                <td>
                                                    <div class="fw-bold">@cliente.NombreCompleto</div>
                                                    <small class="text-muted">@cliente.NumeroDocumento</small>
                                                </td>
                                                <td class="text-center">
                                                    <span class="badge bg-info">@cliente.TotalFacturas</span>
                                                </td>
                                                <td class="text-end">
                                                    <CurrencyDisplay Value="@cliente.MontoTotalCompras" ShowSymbol="true" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="bi bi-star display-6 text-muted"></i>
                                <div class="mt-2 text-muted">No hay datos disponibles</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Análisis por Período -->
        <div class="card shadow-sm mb-4">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="bi bi-calendar3 me-2"></i>Análisis por Período
                </h6>
            </div>
            <div class="card-body">
                <div class="row g-4">
                    <div class="col-md-4">
                        <div class="analysis-item">
                            <div class="analysis-label">Rango del Reporte</div>
                            <div class="analysis-value">
                                @ReporteVentas.FechaInicio.ToColombiaShortDateString() - 
                                @ReporteVentas.FechaFin.ToColombiaShortDateString()
                            </div>
                            <small class="text-muted">@CalcularDiasReporte() día(s)</small>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="analysis-item">
                            <div class="analysis-label">Promedio por Día</div>
                            <div class="analysis-value">
                                @CurrencyHelper.FormatCurrency(CalcularPromedioDiario())
                            </div>
                            <small class="text-muted">Ventas diarias</small>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="analysis-item">
                            <div class="analysis-label">Promedio por Factura</div>
                            <div class="analysis-value">
                                @CurrencyHelper.FormatCurrency(CalcularPromedioFactura())
                            </div>
                            <small class="text-muted">Ticket promedio</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Desglose de Impuestos y Descuentos -->
        <div class="row g-4 mb-4">
            <div class="col-lg-6">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-receipt-cutoff me-2"></i>Desglose de Ventas
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="breakdown-item">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Subtotal (Sin IVA)</span>
                                <span class="fw-bold">@CurrencyHelper.FormatCurrency(CalcularSubtotalSinIVA())</span>
                            </div>
                        </div>
                        <div class="breakdown-item">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Total Descuentos</span>
                                <span class="fw-bold text-success">@ReporteVentas.TotalDescuentosFormateado</span>
                            </div>
                        </div>
                        <div class="breakdown-item">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Total IVA (19%)</span>
                                <span class="fw-bold text-info">@ReporteVentas.TotalIVAFormateado</span>
                            </div>
                        </div>
                        <hr>
                        <div class="breakdown-item">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="fw-bold">Total Final</span>
                                <span class="fw-bold text-primary fs-5">@ReporteVentas.TotalVentasFormateado</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="bi bi-pie-chart me-2"></i>Distribución de Ventas
                        </h6>
                    </div>
                    <div class="card-body">
                        @if (ReporteVentas.TotalVentas > 0)
                        {
                            <div class="chart-placeholder">
                                <div class="distribution-item">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <div class="color-indicator bg-primary me-2"></div>
                                            <span>Ventas Netas</span>
                                        </div>
                                        <span>@CalcularPorcentajeVentasNetas()%</span>
                                    </div>
                                </div>
                                <div class="distribution-item">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <div class="color-indicator bg-info me-2"></div>
                                            <span>IVA</span>
                                        </div>
                                        <span>@CalcularPorcentajeIVA()%</span>
                                    </div>
                                </div>
                                <div class="distribution-item">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <div class="color-indicator bg-success me-2"></div>
                                            <span>Descuentos</span>
                                        </div>
                                        <span>@CalcularPorcentajeDescuentos()%</span>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="bi bi-pie-chart display-6 text-muted"></i>
                                <div class="mt-2 text-muted">Sin datos para mostrar</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Acciones del Reporte -->
        <div class="card shadow-sm">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="bi bi-tools me-2"></i>Acciones del Reporte
                </h6>
            </div>
            <div class="card-body">
                <div class="d-flex gap-2 flex-wrap">
                    <button class="btn btn-primary" @onclick="ExportarReporte">
                        <i class="bi bi-download me-1"></i>Exportar Excel
                    </button>
                    <button class="btn btn-outline-primary" @onclick="ExportarPDF">
                        <i class="bi bi-file-pdf me-1"></i>Exportar PDF
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="ImprimirReporte">
                        <i class="bi bi-printer me-1"></i>Imprimir
                    </button>
                    <button class="btn btn-outline-info" @onclick="EnviarPorEmail">
                        <i class="bi bi-envelope me-1"></i>Enviar por Email
                    </button>
                    <button class="btn btn-outline-success" @onclick="ProgramarReporte">
                        <i class="bi bi-calendar-event me-1"></i>Programar Reporte
                    </button>
                </div>
            </div>
        </div>
    }
    else if (!IsLoading)
    {
        <div class="text-center py-5">
            <i class="bi bi-graph-up display-1 text-muted"></i>
            <h4 class="mt-3">Genere su Reporte de Ventas</h4>
            <p class="text-muted">Seleccione las fechas y filtros deseados, luego haga clic en "Generar" para ver el análisis detallado.</p>
            <button class="btn btn-primary btn-lg" @onclick="GenerarReporte" disabled="@(!EsFechaValida)">
                <i class="bi bi-play-fill me-2"></i>Generar Reporte
            </button>
        </div>
    }
</div>

<style>
    .reporte-facturas-container {
        padding: 1rem;
    }

    .page-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-radius: 0.5rem;
        border-left: 4px solid var(--bs-primary);
    }

    .metric-card {
        transition: transform 0.2s ease-in-out;
    }

    .metric-card:hover {
        transform: translateY(-2px);
    }

    .metric-icon {
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
    }

    .metric-number {
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
    }

    .analysis-item {
        text-align: center;
        padding: 1rem;
        border: 1px solid var(--bs-border-color);
        border-radius: 0.5rem;
        background: var(--bs-light);
    }

    .analysis-label {
        font-size: 0.875rem;
        color: var(--bs-secondary);
        margin-bottom: 0.5rem;
    }

    .analysis-value {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--bs-primary);
    }

    .breakdown-item {
        padding: 0.75rem 0;
        border-bottom: 1px solid var(--bs-border-color);
    }

    .breakdown-item:last-child {
        border-bottom: none;
    }

    .distribution-item {
        margin-bottom: 1rem;
    }

    .color-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
    }

    .chart-placeholder {
        min-height: 200px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .card-header {
        background-color: var(--bs-light);
        border-bottom: 1px solid var(--bs-border-color);
    }

    @@media (max-width: 768px) {
        .page-header {
            padding: 1rem;
        }

        .metric-number {
            font-size: 1.5rem;
        }

        .analysis-item {
            margin-bottom: 1rem;
        }
    }
</style>

@code {
    private Alert? AlertComponent;

    private bool IsLoading = false;
    private bool ReporteGenerado = false;
    private DateTime FechaInicio = DateTime.Now.StartOfMonth();
    private DateTime FechaFin = DateTime.Now;
    private string EstadoFiltro = "";
    private int ClienteFiltro = 0;

    private ReporteVentasDto? ReporteVentas;
    private List<ClienteDto>? ClientesDisponibles;

    private bool HasFechaError => !EsFechaValida;
    private string FechaErrorMessage = "";
    private bool EsFechaValida => FechaInicio <= FechaFin && FechaInicio <= DateTime.Now && FechaFin <= DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
        
        // Verificar si hay parámetros en la URL para generar automáticamente
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var autoGenerar = query["auto"] == "true";

        if (autoGenerar)
        {
            await GenerarReporte();
        }
    }

    private async Task CargarClientes()
    {
        try
        {
            var result = await ClienteService.GetAll();
            if (result.Success && result.Data != null)
            {
                ClientesDisponibles = result.Data.Where(c => c.Activo).Take(100).ToList();
            }
        }
        catch (Exception)
        {
            ClientesDisponibles = new List<ClienteDto>();
        }
    }

    private async Task GenerarReporte()
    {
        if (!EsFechaValida)
        {
            ValidarFechas();
            return;
        }

        try
        {
            IsLoading = true;
            StateHasChanged();

            var result = await FacturaService.GenerarReporteVentas(FechaInicio, FechaFin);
            if (result.Success && result.Data != null)
            {
                ReporteVentas = result.Data;
                ReporteGenerado = true;

                AlertComponent?.Show(
                    "Reporte generado exitosamente",
                    AlertType.Success,
                    "Reporte Completo"
                );
            }
            else
            {
                AlertComponent?.Show(
                    result.Message ?? "Error al generar el reporte",
                    AlertType.Danger,
                    "Error"
                );
                ReporteGenerado = false;
            }
        }
        catch (Exception ex)
        {
            AlertComponent?.Show(
                $"Error al generar el reporte: {ex.Message}",
                AlertType.Danger,
                "Error"
            );
            ReporteGenerado = false;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void ValidarFechas()
    {
        if (FechaInicio > FechaFin)
        {
            FechaErrorMessage = "La fecha de inicio no puede ser mayor a la fecha de fin";
        }
        else if (FechaInicio > DateTime.Now)
        {
            FechaErrorMessage = "La fecha de inicio no puede ser futura";
        }
        else if (FechaFin > DateTime.Now)
        {
            FechaErrorMessage = "La fecha de fin no puede ser futura";
        }
        else
        {
            FechaErrorMessage = "";
        }
    }

    // Métodos para rangos rápidos
    private async Task SetHoy()
    {
        FechaInicio = DateTime.Today;
        FechaFin = DateTime.Today;
        await GenerarReporte();
    }

    private async Task SetAyer()
    {
        var ayer = DateTime.Today.AddDays(-1);
        FechaInicio = ayer;
        FechaFin = ayer;
        await GenerarReporte();
    }

    private async Task SetEstaSemana()
    {
        var hoy = DateTime.Today;
        FechaInicio = hoy.AddDays(-(int)hoy.DayOfWeek);
        FechaFin = hoy;
        await GenerarReporte();
    }

    private async Task SetEsteMes()
    {
        FechaInicio = DateTime.Now.StartOfMonth();
        FechaFin = DateTime.Today;
        await GenerarReporte();
    }

    private async Task SetMesAnterior()
    {
        var mesAnterior = DateTime.Now.AddMonths(-1);
        FechaInicio = mesAnterior.StartOfMonth();
        FechaFin = mesAnterior.EndOfMonth().Date;
        await GenerarReporte();
    }

    private async Task SetEsteAño()
    {
        FechaInicio = DateTime.Now.StartOfYear();
        FechaFin = DateTime.Today;
        await GenerarReporte();
    }

    // Métodos de cálculo
    private int CalcularDiasReporte()
    {
        if (ReporteVentas == null) return 0;
        return (ReporteVentas.FechaFin - ReporteVentas.FechaInicio).Days + 1;
    }

    private decimal CalcularPromedioDiario()
    {
        if (ReporteVentas == null) return 0;
        var dias = CalcularDiasReporte();
        return dias > 0 ? ReporteVentas.TotalVentas / dias : 0;
    }

    private decimal CalcularPromedioFactura()
    {
        if (ReporteVentas == null || ReporteVentas.TotalFacturas == 0) return 0;
        return ReporteVentas.TotalVentas / ReporteVentas.TotalFacturas;
    }

    private decimal CalcularSubtotalSinIVA()
    {
        if (ReporteVentas == null) return 0;
        return ReporteVentas.TotalVentas - ReporteVentas.TotalIVA;
    }

    private decimal CalcularPorcentajeVentasNetas()
    {
        if (ReporteVentas == null || ReporteVentas.TotalVentas == 0) return 0;
        var ventasNetas = ReporteVentas.TotalVentas - ReporteVentas.TotalIVA - ReporteVentas.TotalDescuentos;
        return Math.Round((ventasNetas / ReporteVentas.TotalVentas) * 100, 1);
    }

    private decimal CalcularPorcentajeIVA()
    {
        if (ReporteVentas == null || ReporteVentas.TotalVentas == 0) return 0;
        return Math.Round((ReporteVentas.TotalIVA / ReporteVentas.TotalVentas) * 100, 1);
    }

    private decimal CalcularPorcentajeDescuentos()
    {
        if (ReporteVentas == null || ReporteVentas.TotalVentas == 0) return 0;
        return Math.Round((ReporteVentas.TotalDescuentos / ReporteVentas.TotalVentas) * 100, 1);
    }

    // Acciones de exportación
    private async Task ExportarReporte()
    {
        AlertComponent?.Show("Función de exportación a Excel próximamente disponible", AlertType.Info);
        await Task.CompletedTask;
    }

    private async Task ExportarPDF()
    {
        AlertComponent?.Show("Función de exportación a PDF próximamente disponible", AlertType.Info);
        await Task.CompletedTask;
    }

    private async Task ImprimirReporte()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("window.print");
        }
        catch (Exception ex)
        {
            AlertComponent?.Show($"Error al imprimir: {ex.Message}", AlertType.Warning);
        }
    }

    private async Task EnviarPorEmail()
    {
        AlertComponent?.Show("Función de envío por email próximamente disponible", AlertType.Info);
        await Task.CompletedTask;
    }

    private async Task ProgramarReporte()
    {
        AlertComponent?.Show("Función de programación de reportes próximamente disponible", AlertType.Info);
        await Task.CompletedTask;
    }
}
