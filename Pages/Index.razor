@page "/"
@using FacturacionPortal.WEB.Models.Facturacion
@using FacturacionPortal.WEB.Services.Interface
@using FacturacionPortal.WEB.Components.Shared
@using FacturacionPortal.WEB.Shared.Components
@using FacturacionPortal.WEB.Helpers
@using FacturacionPortal.WEB.Util
@using FacturacionPortal.WEB.Util.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@inject IReporteService ReporteService
@inject IFacturaService FacturaService
@inject IArticuloService ArticuloService
@inject IClienteService ClienteService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Dashboard - FacturacionPortal</PageTitle>

<div class="dashboard-container">
    <!-- Header -->
    <div class="dashboard-header mb-4">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="display-6 mb-1">
                    <i class="bi bi-speedometer2 text-primary me-2"></i>
                    Dashboard
                </h1>
                <p class="text-muted mb-0">Resumen general del sistema de facturación</p>
            </div>
            <div class="col-md-4 text-end">
                <div class="d-flex gap-2 justify-content-end">
                    <button class="btn btn-primary" @onclick="CrearFacturaRapida">
                        <i class="bi bi-lightning-fill me-1"></i>Factura Rápida
                    </button>
                    <button class="btn btn-outline-primary" @onclick="RefreshDashboard" disabled="@IsLoading">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise me-1"></i>
                        }
                        Actualizar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <Alert @ref="AlertComponent" />

    @if (IsLoading)
    {
        <Loading IsVisible="true" Text="Cargando dashboard..." />
    }
    else
    {
        <!-- Tarjetas de Métricas Principales -->
        <div class="row g-3 mb-4">
            <div class="col-lg-3 col-md-6">
                <div class="metric-card card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="metric-icon bg-primary text-white rounded-circle mx-auto mb-3">
                            <i class="bi bi-receipt-cutoff"></i>
                        </div>
                        <h3 class="metric-value text-primary mb-1">@TotalFacturasHoy</h3>
                        <p class="metric-label text-muted mb-0">Facturas Hoy</p>
                        <small class="text-success">
                            <i class="bi bi-arrow-up"></i> +@FacturasCrecentesHoy vs ayer
                        </small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6">
                <div class="metric-card card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="metric-icon bg-success text-white rounded-circle mx-auto mb-3">
                            <i class="bi bi-currency-dollar"></i>
                        </div>
                        <h3 class="metric-value text-success mb-1">@VentasHoyFormateado</h3>
                        <p class="metric-label text-muted mb-0">Ventas Hoy</p>
                        <small class="text-success">
                            <i class="bi bi-arrow-up"></i> +@PorcentajeCrecimientoVentas%
                        </small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6">
                <div class="metric-card card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="metric-icon bg-info text-white rounded-circle mx-auto mb-3">
                            <i class="bi bi-people"></i>
                        </div>
                        <h3 class="metric-value text-info mb-1">@TotalClientes</h3>
                        <p class="metric-label text-muted mb-0">Clientes Activos</p>
                        <small class="text-info">
                            <i class="bi bi-plus"></i> @ClientesNuevosHoy nuevos hoy
                        </small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6">
                <div class="metric-card card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <div class="metric-icon bg-warning text-white rounded-circle mx-auto mb-3">
                            <i class="bi bi-exclamation-triangle"></i>
                        </div>
                        <h3 class="metric-value text-warning mb-1">@ArticulosStockBajo</h3>
                        <p class="metric-label text-muted mb-0">Stock Bajo</p>
                        <small class="text-muted">
                            Artículos con inventario crítico
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sección Principal -->
        <div class="row g-4">
            <!-- Columna Izquierda -->
            <div class="col-lg-8">
                <!-- Ventas por Mes -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-graph-up me-2"></i>Ventas por Mes
                        </h5>
                        <div class="d-flex gap-2">
                            <select class="form-select form-select-sm" style="width: auto;" @onchange="OnAñoChanged">
                                @foreach (var año in AñosDisponibles)
                                {
                                    <option value="@año" selected="@(año == AñoSeleccionado)">@año</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (VentasPorMes?.Any() == true)
                        {
                            <div class="chart-container" style="height: 300px;">
                                <!-- Aquí iría un gráfico de Chart.js o similar -->
                                <div class="table-responsive">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Mes</th>
                                                <th class="text-end">Facturas</th>
                                                <th class="text-end">Ventas</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var venta in VentasPorMes.Take(6))
                                            {
                                                <tr>
                                                    <td>@GetNombreMes(venta.Mes)</td>
                                                    <td class="text-end">@venta.TotalFacturas</td>
                                                    <td class="text-end">@CurrencyHelper.FormatCurrency(venta.TotalVentas)</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-graph-up display-4 text-muted"></i>
                                <div class="mt-2 text-muted">No hay datos de ventas disponibles</div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Facturas Recientes -->
                <div class="card shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-clock-history me-2"></i>Facturas Recientes
                        </h5>
                        <a href="/facturas" class="btn btn-outline-primary btn-sm">
                            Ver todas <i class="bi bi-arrow-right ms-1"></i>
                        </a>
                    </div>
                    <div class="card-body p-0">
                        @if (FacturasRecientes?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Número</th>
                                            <th>Cliente</th>
                                            <th>Fecha</th>
                                            <th class="text-end">Total</th>
                                            <th class="text-center">Estado</th>
                                            <th class="text-center">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var factura in FacturasRecientes.Take(10))
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@factura.NumeroFactura</strong>
                                                </td>
                                                <td>
                                                    <div>@factura.ClienteNombreCompleto</div>
                                                    <small class="text-muted">@factura.ClienteNumeroDocumento</small>
                                                </td>
                                                <td>
                                                    <div>@factura.Fecha.ToColombiaShortDateString()</div>
                                                    <small class="text-muted">@factura.Fecha.ToTimeString()</small>
                                                </td>
                                                <td class="text-end">
                                                    <CurrencyDisplay Value="@factura.Total" ShowSymbol="true" />
                                                </td>
                                                <td class="text-center">
                                                    <StatusBadge Status="@factura.Estado" />
                                                </td>
                                                <td class="text-center">
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-primary" 
                                                                @onclick="() => VerFactura(factura.Id)" 
                                                                title="Ver detalle">
                                                            <i class="bi bi-eye"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-receipt display-4 text-muted"></i>
                                <div class="mt-2 text-muted">No hay facturas recientes</div>
                                <button class="btn btn-primary mt-2" @onclick="CrearFacturaRapida">
                                    <i class="bi bi-plus me-1"></i>Crear Primera Factura
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Columna Derecha -->
            <div class="col-lg-4">
                <!-- Artículos Más Vendidos -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-trophy me-2"></i>Más Vendidos
                        </h5>
                        <a href="/reportes/articulos-vendidos" class="btn btn-outline-primary btn-sm">
                            Ver reporte
                        </a>
                    </div>
                    <div class="card-body">
                        @if (ArticulosMasVendidos?.Any() == true)
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var (articulo, index) in ArticulosMasVendidos.Take(5).Select((a, i) => (a, i + 1)))
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                        <div class="d-flex align-items-center">
                                            <span class="badge bg-primary rounded-pill me-2">@index</span>
                                            <div>
                                                <div class="fw-bold">@articulo.Nombre</div>
                                                <small class="text-muted">@articulo.Codigo</small>
                                            </div>
                                        </div>
                                        <div class="text-end">
                                            <div class="fw-bold">@articulo.CantidadVendida</div>
                                            <small class="text-muted">vendidos</small>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="bi bi-trophy display-6 text-muted"></i>
                                <div class="mt-2 text-muted">No hay datos disponibles</div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Clientes Frecuentes -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-star me-2"></i>Clientes Frecuentes
                        </h5>
                        <a href="/reportes/clientes-frecuentes" class="btn btn-outline-primary btn-sm">
                            Ver todos
                        </a>
                    </div>
                    <div class="card-body">
                        @if (ClientesFrecuentes?.Any() == true)
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var cliente in ClientesFrecuentes.Take(5))
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                        <div>
                                            <div class="fw-bold">@cliente.NombreCompleto</div>
                                            <small class="text-muted">@cliente.NumeroDocumento</small>
                                        </div>
                                        <div class="text-end">
                                            <div class="fw-bold">@cliente.TotalFacturas</div>
                                            <small class="text-muted">facturas</small>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="bi bi-star display-6 text-muted"></i>
                                <div class="mt-2 text-muted">No hay datos disponibles</div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Alertas y Notificaciones -->
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-bell me-2"></i>Alertas
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (ArticulosStockBajo > 0)
                        {
                            <div class="alert alert-warning d-flex align-items-center" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                <div>
                                    <strong>@ArticulosStockBajo artículo(s)</strong> con stock bajo.
                                    <a href="/reportes/stock-bajo" class="alert-link">Ver detalles</a>
                                </div>
                            </div>
                        }

                        @if (FacturasPendientes > 0)
                        {
                            <div class="alert alert-info d-flex align-items-center" role="alert">
                                <i class="bi bi-info-circle-fill me-2"></i>
                                <div>
                                    <strong>@FacturasPendientes factura(s)</strong> pendientes de proceso.
                                    <a href="/facturas?estado=pendiente" class="alert-link">Revisar</a>
                                </div>
                            </div>
                        }

                        @if (ArticulosStockBajo == 0 && FacturasPendientes == 0)
                        {
                            <div class="text-center py-3">
                                <i class="bi bi-check-circle-fill text-success display-6"></i>
                                <div class="mt-2 text-success">Todo en orden</div>
                                <small class="text-muted">No hay alertas pendientes</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Accesos Rápidos -->
        <div class="row g-3 mt-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-lightning me-2"></i>Accesos Rápidos
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-lg-2 col-md-4 col-6">
                                <button class="btn btn-outline-primary w-100 h-100 d-flex flex-column align-items-center py-3" 
                                        @onclick="CrearFacturaRapida">
                                    <i class="bi bi-plus-circle display-6 mb-2"></i>
                                    <span class="small">Nueva Factura</span>
                                </button>
                            </div>
                            <div class="col-lg-2 col-md-4 col-6">
                                <button class="btn btn-outline-success w-100 h-100 d-flex flex-column align-items-center py-3" 
                                        @onclick='() => Navigation.NavigateTo("/clientes/crear")'>
                                    <i class="bi bi-person-plus display-6 mb-2"></i>
                                    <span class="small">Nuevo Cliente</span>
                                </button>
                            </div>
                            <div class="col-lg-2 col-md-4 col-6">
                                <button class="btn btn-outline-info w-100 h-100 d-flex flex-column align-items-center py-3" 
                                        @onclick='() => Navigation.NavigateTo("/articulos/crear")'>
                                    <i class="bi bi-box-seam display-6 mb-2"></i>
                                    <span class="small">Nuevo Artículo</span>
                                </button>
                            </div>
                            <div class="col-lg-2 col-md-4 col-6">
                                <button class="btn btn-outline-warning w-100 h-100 d-flex flex-column align-items-center py-3" 
                                        @onclick='() => Navigation.NavigateTo("/reportes/ventas")'>
                                    <i class="bi bi-graph-up display-6 mb-2"></i>
                                    <span class="small">Reporte Ventas</span>
                                </button>
                            </div>
                            <div class="col-lg-2 col-md-4 col-6">
                                <button class="btn btn-outline-secondary w-100 h-100 d-flex flex-column align-items-center py-3" 
                                        @onclick='() => Navigation.NavigateTo("/facturas")'>
                                    <i class="bi bi-receipt-cutoff display-6 mb-2"></i>
                                    <span class="small">Ver Facturas</span>
                                </button>
                            </div>
                            <div class="col-lg-2 col-md-4 col-6">
                                <button class="btn btn-outline-primary w-100 h-100 d-flex flex-column align-items-center py-3" 
                                        @onclick='() => Navigation.NavigateTo("/clientes")'>
                                    <i class="bi bi-people display-6 mb-2"></i>
                                    <span class="small">Ver Clientes</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .dashboard-container {
        padding: 1rem;
    }

    .dashboard-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 2rem;
        border-radius: 0.75rem;
        border-left: 4px solid var(--bs-primary);
    }

    .metric-card {
        transition: transform 0.2s ease-in-out;
    }

    .metric-card:hover {
        transform: translateY(-2px);
    }

    .metric-icon {
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
    }

    .metric-value {
        font-size: 2rem;
        font-weight: 700;
    }

    .metric-label {
        font-size: 0.875rem;
        font-weight: 500;
    }

    .chart-container {
        position: relative;
        width: 100%;
    }

    .list-group-item {
        transition: background-color 0.15s ease-in-out;
    }

    .list-group-item:hover {
        background-color: var(--bs-light);
    }

    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .card-header {
        background-color: var(--bs-light);
        border-bottom: 1px solid var(--bs-border-color);
    }

    @@media (max-width: 768px) {
        .dashboard-header {
            padding: 1rem;
        }

        .metric-value {
            font-size: 1.5rem;
        }

        .display-6 {
            font-size: 2rem;
        }
    }
</style>

@code {
    private Alert? AlertComponent;

    private bool IsLoading = true;
    private int AñoSeleccionado = DateTime.Now.Year;
    private List<int> AñosDisponibles = new();

    // Métricas principales
    private int TotalFacturasHoy = 0;
    private int FacturasCrecentesHoy = 0;
    private decimal VentasHoy = 0;
    private string VentasHoyFormateado = "$0";
    private decimal PorcentajeCrecimientoVentas = 0;
    private int TotalClientes = 0;
    private int ClientesNuevosHoy = 0;
    private int ArticulosStockBajo = 0;
    private int FacturasPendientes = 0;

    // Datos para gráficos y listas
    private List<VentaPorMesDto>? VentasPorMes;
    private List<FacturaResumenDto>? FacturasRecientes;
    private List<ArticuloVendidoDto>? ArticulosMasVendidos;
    private List<ClienteFrecuenteDto>? ClientesFrecuentes;

    protected override async Task OnInitializedAsync()
    {
        // Inicializar años disponibles (últimos 3 años)
        AñosDisponibles = Enumerable.Range(DateTime.Now.Year - 2, 3).ToList();
        
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            // Cargar todas las métricas en paralelo
            var tasks = new List<Task>
            {
                LoadMainMetrics(),
                LoadVentasPorMes(),
                LoadFacturasRecientes(),
                LoadArticulosMasVendidos(),
                LoadClientesFrecuentes(),
                LoadAlertas()
            };

            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            AlertComponent?.Show(
                $"Error al cargar el dashboard: {ex.Message}",
                AlertType.Danger,
                "Error"
            );
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMainMetrics()
    {
        try
        {
            var hoy = DateTime.Today;
            var ayer = hoy.AddDays(-1);

            // Obtener ventas del día
            var ventasHoyResult = await ReporteService.GetVentasDelDia(hoy);
            if (ventasHoyResult.Success && ventasHoyResult.Data != null)
            {
                // Aquí asumo que el resultado tiene las propiedades necesarias
                // Necesitarías ajustar según la estructura real del DTO
                VentasHoy = 0; // Extraer del resultado
                VentasHoyFormateado = CurrencyHelper.FormatCurrency(VentasHoy);
                TotalFacturasHoy = 0; // Extraer del resultado
            }

            // Obtener total de clientes activos
            var clientesResult = await ClienteService.GetAll();
            if (clientesResult.Success && clientesResult.Data != null)
            {
                TotalClientes = clientesResult.Data.Count(c => c.Activo);
            }

            // Obtener artículos con stock bajo
            var stockBajoResult = await ReporteService.GetArticulosStockBajo();
            if (stockBajoResult.Success && stockBajoResult.Data != null)
            {
                ArticulosStockBajo = stockBajoResult.Data.Count;
            }

            // Simular algunos valores (ajustar según la API real)
            FacturasCrecentesHoy = 5;
            PorcentajeCrecimientoVentas = 12.5m;
            ClientesNuevosHoy = 2;
            FacturasPendientes = 3;
        }
        catch (Exception)
        {
            // Manejar errores silenciosamente
        }
    }

    private async Task LoadVentasPorMes()
    {
        try
        {
            var result = await ReporteService.GetVentasPorMes(AñoSeleccionado);
            if (result.Success && result.Data != null)
            {
                // Convertir el resultado a VentaPorMesDto
                VentasPorMes = new List<VentaPorMesDto>();
                // Aquí necesitarías deserializar según la estructura real
            }
        }
        catch (Exception)
        {
            VentasPorMes = new List<VentaPorMesDto>();
        }
    }

    private async Task LoadFacturasRecientes()
    {
        try
        {
            var result = await FacturaService.GetPaginated(1, 10);
            if (result.Success && result.Data?.Lista != null)
            {
                FacturasRecientes = result.Data.Lista.Select(f => new FacturaResumenDto
                {
                    Id = f.Id,
                    NumeroFactura = f.NumeroFactura,
                    Fecha = f.Fecha,
                    ClienteNombreCompleto = f.ClienteNombreCompleto,
                    ClienteNumeroDocumento = f.ClienteNumeroDocumento,
                    Total = f.Total,
                    Estado = f.Estado
                }).ToList();
            }
        }
        catch (Exception)
        {
            FacturasRecientes = new List<FacturaResumenDto>();
        }
    }

    private async Task LoadArticulosMasVendidos()
    {
        try
        {
            var fechaInicio = DateTime.Now.StartOfMonth();
            var fechaFin = DateTime.Now.EndOfDay();
            
            var result = await ReporteService.GetArticulosMasVendidos(fechaInicio, fechaFin, 5);
            if (result.Success && result.Data != null)
            {
                ArticulosMasVendidos = result.Data;
            }
        }
        catch (Exception)
        {
            ArticulosMasVendidos = new List<ArticuloVendidoDto>();
        }
    }

    private async Task LoadClientesFrecuentes()
    {
        try
        {
            var fechaInicio = DateTime.Now.StartOfMonth();
            var fechaFin = DateTime.Now.EndOfDay();
            
            var result = await ReporteService.GetClientesFrecuentes(fechaInicio, fechaFin, 5);
            if (result.Success && result.Data != null)
            {
                ClientesFrecuentes = result.Data;
            }
        }
        catch (Exception)
        {
            ClientesFrecuentes = new List<ClienteFrecuenteDto>();
        }
    }

    private async Task LoadAlertas()
    {
        // Las alertas ya se cargan en LoadMainMetrics
        await Task.CompletedTask;
    }

    private async Task OnAñoChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int año))
        {
            AñoSeleccionado = año;
            await LoadVentasPorMes();
        }
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
    }

    private void CrearFacturaRapida()
    {
        Navigation.NavigateTo("/facturas/crear?quick=true");
    }

    private void VerFactura(int facturaId)
    {
        Navigation.NavigateTo($"/facturas/{facturaId}");
    }

    private string GetNombreMes(int mes)
    {
        return new DateTime(2024, mes, 1).GetMonthName();
    }

    // DTO temporal para ventas por mes (ajustar según tu implementación)
    public class VentaPorMesDto
    {
        public int Mes { get; set; }
        public int TotalFacturas { get; set; }
        public decimal TotalVentas { get; set; }
    }
}
